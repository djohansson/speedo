#once

.Clang_BaseConfig = [
#if exists(LLVM_PATH)
#import LLVM_PATH
	.LLVMPath = '$LLVM_PATH$'
#else
#if __WINDOWS__
	.LLVMPath = 'C:/Program Files/LLVM'
#else
	.LLVMPath = '/usr'
#endif
#endif
#if exists(LLVM_VERSION)
#import LLVM_VERSION
	.LLVMVersion = '$LLVM_VERSION$'
#else
	.LLVMVersion = '10.0.0'
#endif
	.LLVMBinPath = '$LLVMPath$/bin'
	.ClangPath = '$LLVMBinPath$'
	.Executable = '$ClangPath$/clang$ExeSuffix$'
	.CompilerInfo = 'Clang'
#if __WINDOWS__
    .Librarian = '$LLVMBinPath$/llvm-ar$ExeSuffix$'
#else
	.Librarian = '$LLVMBinPath$/ar$ExeSuffix$'
#endif
	.Linker = '$ClangPath$/clang$ExeSuffix$'
#if __WINDOWS__
	.PlatformInfo = 'Windows'
#endif //__WINDOWS__
#if __OSX__
	.PlatformInfo = 'OSX'
#endif //__OSX__
#if __LINUX__
	.PlatformInfo = 'Linux'
#endif //__LINUX__
	.Compiler = 'Compiler-Clang'
	.CompilerOptions = '-o "%2" "%1" -c -g -fms-extensions -frtti -Wall'
#if __WINDOWS__
		+ ' -isystem "$LLVMPath$/lib/clang/$LLVMVersion$/include"'
#endif //__WINDOWS__
		+ .PlatformIncludePaths
#if __WINDOWS__
		+ ' -D__WINDOWS__'
		+ ' -D_WIN32'
		+ ' -D_WIN64'
		+ ' -DUNICODE'
		+ ' -D_UNICODE'
		+ ' -D_CRT_SECURE_NO_WARNINGS'
		+ ' -D_CRTDBG_MAP_ALLOC'
		+ ' -D_WIN32_LEAN_AND_MEAN'
		+ ' -DNOMINMAX'
		+ ' -gcodeview'
		+ ' -fuse-ld=lld'
#endif //__WINDOWS__
#if __OSX__
		+ ' -D__APPLE__'
		+ ' -D__OSX__'
		+ ' -fPIC'
#endif //__OSX__
#if __LINUX__
		+ ' -D__LINUX__'
		+ ' -D__linux__'
		+ ' -fPIC'
#endif //__LINUX__
	.CompilerOptionsC = ' -std=c11'
	.CompilerOptionsCpp = ' -std=c++17'
#if !__WINDOWS__
		+ ' -stdlib=libc++'
#endif
	.LinkerOptions = '"%1" -o "%2" -g'
		+ .PlatformLibPaths
#if __WINDOWS__
		+ ' -fuse-ld=lld'
#endif
	.LinkerOptionsCpp = ''
#if !__WINDOWS__
		+ ' -lc++'
#endif
//#if __OSX__
//	+ ' -rpath @executable_path/(something)'
//#endif
	.LibrarianOptions = 'rcs "%2" "%1"'
	.LibrarianType = 'ar'
	.CompilerDebugOptimizations = ' -O0'
	.CompilerReleaseOptimizations = ' -O3 -flto=thin'
	.LibrarianDebugOptimizations = ''
	.LibrarianReleaseOptimizations = ''
	.LinkerDebugOptimizations = ''
	.LinkerReleaseOptimizations = ' -flto=thin'
	.ProfilingEnabled = '0'
]
.Clang_x64_BaseConfig = [
	Using(.Clang_BaseConfig)
	.ArchInfo = 'x64'
	.CompilerOptions + ' -m64 -march=native'
]
.Clang_x64_DebugConfig = [
	Using(.Clang_x64_BaseConfig)
	.ConfigName = 'debug'
	.ProfilingEnabled = '1'
	.CompilerOptions + ' -D_DEBUG'
		+ .CompilerDebugOptimizations
#if __WINDOWS__
		+ ' -D_ITERATOR_DEBUG_LEVEL=1'
#endif //__WINDOWS__
	.LibrarianOptions + .LibrarianDebugOptimizations
	.LinkerOptions + .LinkerDebugOptimizations
#if __WINDOWS__
		+ ' -lmsvcrtd'
#endif //__WINDOWS__
]
.Clang_x64_ReleaseConfig = [
	Using(.Clang_x64_BaseConfig)
	.ConfigName = 'release'
	.CompilerOptions + ' -DRELEASE -DNDEBUG'
		+ .CompilerReleaseOptimizations
	.LibrarianOptions + .LibrarianReleaseOptimizations
	.LinkerOptions + .LinkerReleaseOptimizations
#if __WINDOWS__
		+ ' -lmsvcrt'
#endif //__WINDOWS__
]
.Clang_x64_ProfileConfig = [
	Using(.Clang_x64_ReleaseConfig)
	.ConfigName = 'profile'
	.ProfilingEnabled = '1'
]

.Clang_x64_Configs = {
	.Clang_x64_DebugConfig, .Clang_x64_ProfileConfig, .Clang_x64_ReleaseConfig
}

Compiler('Compiler-Clang')
{
	Using(.Clang_BaseConfig)
}
