#once
#include "platform.bff"

#if __WINDOWS__
.LLVMBasePath = 'C:\Program Files\LLVM\bin'
#endif //__WINDOWS__
#if __OSX__
.LLVMBasePath = '/usr/local/opt/llvm/bin'
.BaseIncludePaths + '-I/usr/local/opt/llvm/include'
	+ ' -I/usr/local/opt/llvm/include/c++/v1'
.BaseLibPaths + ' -L/usr/local/opt/llvm/lib'
	+ ' -Wl,-rpath,/usr/local/opt/llvm/lib'
#endif //__OSX__
#if __LINUX__
.LLVMBasePath = '/usr/bin'
#endif //__LINUX__

.ClangPath = '$LLVMBasePath$'

Compiler('Compiler-Clang')
{
	.Executable = '$ClangPath$/clang$ExeSuffix$'
}

.Clang_BaseConfig = [
	.CompilerInfo  = 'Clang'
    .Librarian = '$LLVMBasePath$/llvm-ar$ExeSuffix$'
	.Linker = '$ClangPath$/clang$ExeSuffix$'
#if __WINDOWS__
	.PlatformInfo = 'Windows'
#endif //__WINDOWS__
#if __OSX__
	.PlatformInfo = 'OSX'
#endif //__OSX__
#if __LINUX__
	.PlatformInfo = 'Linux'
#endif //__LINUX__
	.Compiler = 'Compiler-Clang'
	.BaseCompilerOptions = '-o "%2" "%1" -c -g -fms-extensions'
		+ .BaseIncludePaths
#if __WINDOWS__
		+ ' -D__WINDOWS__'
		+ ' -D_WIN32'
		+ ' -D_WIN64'
		+ ' -DUNICODE'
		+ ' -D_UNICODE'
		+ ' -D_CRT_SECURE_NO_WARNINGS'
		+ ' -D_WIN32_LEAN_AND_MEAN'
		+ ' -DNOMINMAX'
		+ ' -gcodeview'
#endif //__WINDOWS__
#if __OSX__
		+ ' -D__APPLE__'
		+ ' -D__OSX__'
#endif //__OSX__
#if __LINUX__
		+ ' -D__LINUX__'
		+ ' -D__linux__'
#endif //__LINUX__
	.CompilerOptionsC = ' -std=c11'
	.CompilerOptionsCpp = ' -std=c++17'
#if !__WINDOWS__
		+ ' -stdlib=libc++'
#endif
	.CompilerOptions = .BaseCompilerOptions
		+ ' -Wall -fuse-ld=lld'
	.BaseLinkerOptions = '"%1" -o "%2" -g -fuse-ld=lld'
		+ .BaseLibPaths
	.LinkerOptionsCpp = ''
#if !__WINDOWS__
		+ ' -lc++'
#endif
//#if __OSX__
//	+ ' -rpath @executable_path/(something)'
//#endif
	.LinkerOptions = .BaseLinkerOptions
	.LibrarianOptions = 'rcs "%2" "%1"'
	.CompilerDebugOptimizations = ' -O0'
	.CompilerReleaseOptimizations = ' -O3 -flto'
	.LibrarianDebugOptimizations = ''
	.LibrarianReleaseOptimizations = ''
	.LinkerDebugOptimizations = ''
	.LinkerReleaseOptimizations = ' -flto'
]
.Clang_x64_BaseConfig = [
	Using(.Clang_BaseConfig)
	.ArchInfo = 'x64'
	.CompilerOptions + ' -m64'
]
.Clang_x64_DebugConfig = [
	Using(.Clang_x64_BaseConfig)
	.ConfigName = 'debug'
	.CompilerOptions + ' -D_DEBUG -DPROFILING_ENABLED'
		+ .CompilerDebugOptimizations
#if __WINDOWS__
		+ ' -D_ITERATOR_DEBUG_LEVEL=1'
#endif //__WINDOWS__
	.LibrarianOptions + .LibrarianDebugOptimizations
	.LinkerOptions + .LinkerDebugOptimizations
#if __WINDOWS__
		+ ' -lmsvcrtd'
#endif //__WINDOWS__
]
.Clang_x64_ReleaseConfig = [
	Using(.Clang_x64_BaseConfig)
	.ConfigName = 'release'
	.CompilerOptions + ' -DRELEASE -DNDEBUG'
		+ .CompilerReleaseOptimizations
	.LibrarianOptions + .LibrarianReleaseOptimizations
	.LinkerOptions + .LinkerReleaseOptimizations
#if __WINDOWS__
		+ ' -lmsvcrt'
#endif //__WINDOWS__
]
.Clang_x64_ProfileConfig = [
	Using(.Clang_x64_ReleaseConfig)
	.ConfigName = 'profile'
	.CompilerOptions + ' -DPROFILING_ENABLED'
]

.Clang_x64_Configs = {
	.Clang_x64_DebugConfig, .Clang_x64_ProfileConfig, .Clang_x64_ReleaseConfig
}

