#include "clang-config.bff"
#include "vulkan-config.bff"

.ProjectName = 'slang'
.ProjectPath = '$_WORKING_DIR_$'
.IntermediateFilePath = '$ProjectPath$/build.intermediate'
.BuildOutputPath = '$ProjectPath$/build.output'

.AllConfigNames = { }

ForEach(.Config in .Clang_x64_Configs)
{
	Using(.Config)

	^AllConfigNames + '$ConfigName$'

	.IntermediateFilePath + '/$ConfigName$'

	// + ' -Wno-unused-variable'
	// + ' -Wno-unused-local-typedef'
	// + ' -Wno-undefined-var-template'
	// + ' -Wno-inconsistent-missing-override'
	// + ' -Wno-reorder'
	// + ' -Wno-int-to-pointer-cast'
	
	Library('$ConfigName$-core')
	{
		.IntermediateFilePath + '/core'

		.CompilerOptions + .CompilerOptionsCpp
			+ ' -I$ProjectPath$'
			+ ' -I$ProjectPath$/source'
			+ ' -DSLANG_STATIC'

		.CompilerInputPath = '$ProjectPath$/source/core'
		.CompilerOutputPath = '$IntermediateFilePath$'
		
		.LibrarianOutput = '$BuildOutputPath$/$ConfigName$/core'
	#if __WINDOWS__
		.LibrarianOutput + '.lib'
	#endif //__WINDOWS__
	}

	Library('$ConfigName$-slang')
	{
		.IntermediateFilePath + '/slang'

		.CompilerOptions + .CompilerOptionsCpp
			+ ' -I$ProjectPath$'
			+ ' -I$ProjectPath$/source'
			+ ' -DSLANG_STATIC'
		
		.CompilerInputPath = '$ProjectPath$/source/slang'
		.CompilerOutputPath = '$IntermediateFilePath$'
		
		.LibrarianOutput = '$BuildOutputPath$/$ConfigName$/slang'
	#if __WINDOWS__
		.LibrarianOutput + '.lib'
	#endif //__WINDOWS__
	}

	ObjectList('$ConfigName$-slangc')
	{
		.IntermediateFilePath + '/slangc'

		.CompilerOptions + .CompilerOptionsCpp
			+ ' -I$ProjectPath$'
			+ ' -I$ProjectPath$/source'
			+ ' -DSLANG_STATIC'
			
		.CompilerInputPath = '$ProjectPath$/source/slangc'
		.CompilerOutputPath = '$IntermediateFilePath$'
	}

	Executable('$ConfigName$-slangc-exe')
	{
		.IntermediateFilePath + '/slangc'

		.Libraries = {
			'$ConfigName$-core',
			'$ConfigName$-slang',
			'$ConfigName$-slangc',
		}

		.LinkerOutput = '$BuildOutputPath$/$ConfigName$/slangc'
		.LinkerOptions + .LinkerOptionsCpp
	#if __WINDOWS__
		.LinkerOutput + '.exe'
	#endif //__WINDOWS__
	}

	Library('$ConfigName$-glfw')
	{
		.IntermediateFilePath + '/glfw'

		.CompilerOptions + .CompilerOptionsC
			+ ' -D_GLFW_WIN32=1'

		.CompilerInputFiles = {
			'$ProjectPath$/external/glfw/src/context.c',
			'$ProjectPath$/external/glfw/src/init.c',
			'$ProjectPath$/external/glfw/src/input.c',
			'$ProjectPath$/external/glfw/src/monitor.c',
			'$ProjectPath$/external/glfw/src/vulkan.c',
			'$ProjectPath$/external/glfw/src/window.c',
			'$ProjectPath$/external/glfw/src/win32_init.c',
			'$ProjectPath$/external/glfw/src/win32_joystick.c',
			'$ProjectPath$/external/glfw/src/win32_monitor.c',
			'$ProjectPath$/external/glfw/src/win32_time.c',
			'$ProjectPath$/external/glfw/src/win32_thread.c',
			'$ProjectPath$/external/glfw/src/win32_window.c',
			'$ProjectPath$/external/glfw/src/wgl_context.c',
			'$ProjectPath$/external/glfw/src/egl_context.c',
			'$ProjectPath$/external/glfw/src/osmesa_context.c',
		}
		.CompilerOutputPath = '$IntermediateFilePath$'

		.LibrarianOutput = '$BuildOutputPath$/$ConfigName$/glfw'
	#if __WINDOWS__
		.LibrarianOutput + '.lib'
	#endif //__WINDOWS__
	}

	Library('$ConfigName$-murmur3')
	{
		.IntermediateFilePath + '/murmur3'

		.CompilerOptions + .CompilerOptionsC
		
		.CompilerInputFiles = {
			'$ProjectPath$/external/murmur3/murmur3.c',
		}
		.CompilerOutputPath = '$IntermediateFilePath$'

		.LibrarianOutput = '$BuildOutputPath$/$ConfigName$/murmur3'
	#if __WINDOWS__
		.LibrarianOutput + '.lib'
	#endif //__WINDOWS__
	}

	Library('$ConfigName$-xxhash')
	{
		.IntermediateFilePath + '/xxhash'

		.CompilerOptions + .CompilerOptionsC
		
		.CompilerInputFiles = {
			'$ProjectPath$/external/xxhash/xxhash.c',
		}
		.CompilerOutputPath = '$IntermediateFilePath$'

		.LibrarianOutput = '$BuildOutputPath$/$ConfigName$/xxhash'
	#if __WINDOWS__
		.LibrarianOutput + '.lib'
	#endif //__WINDOWS__
	}

	ObjectList('$ConfigName$-glslang-OGLCompilersDLL')
	{
		.IntermediateFilePath + '/glslang-OGLCompilersDLL'

		.CompilerOptions + .CompilerOptionsCpp
				+ ' -I$ProjectPath$/external/glslang/OGLCompilersDLL'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'

		.CompilerInputPath = '$ProjectPath$/external/glslang/OGLCompilersDLL'
		.CompilerOutputPath = '$IntermediateFilePath$'
	}

	ObjectList('$ConfigName$-glslang-glslang')
	{
		.IntermediateFilePath + '/glslang-glslang'

		.CompilerOptions + .CompilerOptionsCpp
				+ ' -I$ProjectPath$/external/glslang'
				+ ' -I$ProjectPath$/external/glslang/OGLCompilersDLL'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
		
		.CompilerInputPath = '$ProjectPath$/external/glslang/glslang'
		.CompilerOutputPath = '$IntermediateFilePath$'
	#if __WINDOWS__
		.CompilerInputExcludePath = '$ProjectPath$/external/glslang/glslang/OSDependent/Unix'
	#endif
	}

	ObjectList('$ConfigName$-glslang-hlsl')
	{
		.IntermediateFilePath + '/glslang-hlsl'

		.CompilerOptions + .CompilerOptionsCpp
				+ ' -I$ProjectPath$/external/glslang'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'

		.CompilerInputPath = '$ProjectPath$/external/glslang/hlsl'
		.CompilerOutputPath = '$IntermediateFilePath$'
	}

	ObjectList('$ConfigName$-glslang-SPIRV')
	{
		.IntermediateFilePath + '/glslang-SPIRV'

		.CompilerOptions + .CompilerOptionsCpp
				+ ' -I$ProjectPath$/external/glslang'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'	

		.CompilerInputPath = '$ProjectPath$/external/glslang/SPIRV'
		.CompilerOutputPath = '$IntermediateFilePath$'
	}

	ObjectList('$ConfigName$-slang-glslang')
	{
		.IntermediateFilePath + '/slang-glslang'

		.CompilerOptions + .CompilerOptionsCpp
				+ ' -I$ProjectPath$/external/glslang'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'	

		.CompilerInputPath = '$ProjectPath$/source/slang-glslang'
		.CompilerOutputPath = '$IntermediateFilePath$'
		.LibrarianOutput = '$BuildOutputPath$/$ConfigName$/slang-glslang'
	}

	DLL('$ConfigName$-slang-glslang-dll')
	{
		.IntermediateFilePath + '/slang-glslang'
		.Libraries = {
			'$ConfigName$-core',
			'$ConfigName$-slang',
			'$ConfigName$-slang-glslang',
			'$ConfigName$-glslang-glslang',
			'$ConfigName$-glslang-hlsl',
			'$ConfigName$-glslang-OGLCompilersDLL',
			'$ConfigName$-glslang-SPIRV',
		}
		.LinkerOutput = '$BuildOutputPath$/$ConfigName$/slang-glslang'
		.LinkerOptions + .LinkerOptionsCpp
			+ ' -shared'
	#if __WINDOWS__
		.LinkerOutput + '.dll'
	#endif //__WINDOWS__
	}

	Library('$ConfigName$-gfx')
	{
		.IntermediateFilePath + '/gfx'

		.CompilerOptions + .CompilerOptionsCpp
			+ ' -I$ProjectPath$'
			+ ' -I$ProjectPath$/source'
			+ ' -I$ProjectPath$/tools'
			+ ' -I$ProjectPath$/external/imgui'
			+ ' -I$VulkanSDKPath$/include'
		
		.CompilerInputPath = '$ProjectPath$/tools/gfx'
		.CompilerOutputPath = '$IntermediateFilePath$'
		.LibrarianOutput = '$BuildOutputPath$/$ConfigName$/gfx'
	#if __WINDOWS__
		.LibrarianOutput + '.lib'
	#endif //__WINDOWS__
	}

	ObjectList('$ConfigName$-hello-world')
	{
		.IntermediateFilePath + '/hello-world'

		.CompilerOptions + .CompilerOptionsCpp
			+ ' -I$ProjectPath$'
			+ ' -I$ProjectPath$/source'
			+ ' -I$ProjectPath$/tools'
			+ ' -DSLANG_STATIC'

		.CompilerInputPath = '$ProjectPath$/examples/hello-world'
		.CompilerOutputPath = '$IntermediateFilePath$'
	}

	Executable('$ConfigName$-hello-world-exe')
	{
		.IntermediateFilePath + '/hello-world'
		.Libraries = {
			'$ConfigName$-core',
			'$ConfigName$-gfx',
			'$ConfigName$-slang',
			'$ConfigName$-hello-world',
		}
		.LinkerOutput = '$BuildOutputPath$/$ConfigName$/hello-world'
		.LinkerOptions + .LinkerOptionsCpp
	#if __WINDOWS__
		.LinkerOutput + '.exe'
		.LinkerOptions + ' -luser32'
	#endif //__WINDOWS__
	}

	ObjectList('$ConfigName$-model-viewer')
	{
		.IntermediateFilePath + '/model-viewer'

		.CompilerOptions + .CompilerOptionsCpp
			+ ' -I$ProjectPath$'
			+ ' -I$ProjectPath$/source'
			+ ' -I$ProjectPath$/tools'
			+ ' -DSLANG_STATIC'

		.CompilerInputPath = '$ProjectPath$/examples/model-viewer'
		.CompilerOutputPath = '$IntermediateFilePath$'
	}

	Executable('$ConfigName$-model-viewer-exe')
	{
		.IntermediateFilePath + '/model-viewer'
		.Libraries = {
			'$ConfigName$-core',
			'$ConfigName$-gfx',
			'$ConfigName$-slang',
			'$ConfigName$-model-viewer',
		}
		.LinkerOutput = '$BuildOutputPath$/$ConfigName$/model-viewer'
		.LinkerOptions + .LinkerOptionsCpp
	#if __WINDOWS__
		.LinkerOutput + '.exe'
	#endif //__WINDOWS__
	}

	ObjectList('$ConfigName$-volcano')
	{
		.IntermediateFilePath + '/volcano'

		.CompilerOptions + .CompilerOptionsCpp
			+ ' -I$ProjectPath$'
			+ ' -I$ProjectPath$/source'
			+ ' -I$ProjectPath$/external/glm'
			+ ' -I$ProjectPath$/external/xxhash'
			+ ' -I$ProjectPath$/external/stb'
			+ ' -I$ProjectPath$/external/tinyobjloader'
			+ ' -I$ProjectPath$/external/glfw/include'
			+ ' -I$ProjectPath$/external/VulkanMemoryAllocator/src'
			+ ' -I$ProjectPath$/external/imgui'
			+ ' -I$ProjectPath$/external/cereal/include'
			+ ' -I$VulkanSDKPath$/include'
			+ ' -DSLANG_STATIC'
			+ ' -DVOLCANO_USE_GLFW'
			+ ' -Wno-unused-variable'
			+ ' -Wno-reorder'
			+ ' -Wno-unused-private-field'

		.CompilerInputPath = '$ProjectPath$/examples/volcano'
		.CompilerOutputPath = '$IntermediateFilePath$'
	}

	Executable('$ConfigName$-volcano-exe')
	{
		.IntermediateFilePath + '/volcano'
		.Libraries = {
			'$ConfigName$-core',
			'$ConfigName$-gfx',
			'$ConfigName$-slang',
			'$ConfigName$-volcano',
			'$ConfigName$-glfw',
			'$ConfigName$-xxhash',
		}
		.LinkerOutput = '$BuildOutputPath$/$ConfigName$/volcano'
		.LinkerOptions + .LinkerOptionsCpp
			+ ' -L$VulkanSDKPath$/lib'
	#if __WINDOWS__
		.LinkerOutput + '.exe'
		.LinkerOptions + ' -luser32'
			+ ' -lgdi32'
			+ ' -lshell32'
			+ ' -lvulkan-1'
	#endif //__WINDOWS__
	}

	Alias('$ConfigName$')
	{
		.Targets =
		{
			'$ConfigName$-slang-glslang-dll',
			'$ConfigName$-slangc-exe',
			'$ConfigName$-hello-world-exe',
			'$ConfigName$-model-viewer-exe',
			'$ConfigName$-volcano-exe',
		}
	}
}

Alias('all')
{
//	.Targets = .AllConfigNames
	.Targets = { 'debug' }
}
