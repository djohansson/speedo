#include "scripts/bff/buildsystem.bff"

.FBuildProjectName = "speedo"

.CompilerBaseConfig = .Clang_BaseConfig
.CompilerConfigs = .Clang_Native_Configs

.Triplet = '$ArchitectureName$-$OSName$-clang'

{
	Using(.CompilerBaseConfig)

	// .StdModule =
	// [
	// 	Using(.LibraryCommon)

	// 	.ProjectBasePath = '$BuildRootPath$/src'
		
	// 	.Name = 'core'
	// 	.LibraryCompilerOptions = .CompilerOptionsCpp
	// 		+ ' -I$ProjectBasePath$'
	// 		+ ' -fprebuilt-module-path=$IntermediatePath$'
	// 	.CompilerInputFiles = {
	// 		'$ProjectBasePath$/core/std.cpp',
	// 	}
	// ]

	.CoreLibrary =
	[
		Using(.LibraryCommon)

		.ProjectBasePath = '$BuildRootPath$/src'
		
		.Name = 'core'
		.LibraryCompilerOptions = .CompilerOptionsCpp
			+ ' -I$ProjectBasePath$'
			+ ' -isystem $BuildRootPath$/build.vcpkg/$Triplet$/include'
			+ ' -DUUID_SYSTEM_GENERATOR'
			+ ' -Wno-deprecated-builtins'
			+ ' -Wno-unknown-attributes'
			+ ' -Wno-missing-braces'
		.CompilerInputPath = '$ProjectBasePath$/core'
		.CompilerInputPattern = "*.cpp"
	]

	.RhiLibrary =
	[
		Using(.LibraryCommon)

		.ProjectBasePath = '$BuildRootPath$/src'
		
		.Name = 'rhi'
		.LibraryCompilerOptions = .CompilerOptionsCpp
#if __WINDOWS__
			+ ' -DVK_USE_PLATFORM_WIN32_KHR=1'
			+ ' -DSTBI_NO_SIMD' // fixme: linker errors otherwise
#endif //__WINDOWS__
#if __OSX__
			//+ ' -DVK_USE_PLATFORM_MACOS_MVK=1'
			+ ' -DVK_USE_PLATFORM_METAL_EXT=1'
#endif //__OSX__
#if __LINUX__
			// + ' -DVK_USE_PLATFORM_WAYLAND_KHR=1'
			+ ' -DVK_USE_PLATFORM_XCB_KHR=1'
			// + ' -DVK_USE_PLATFORM_XLIB_KHR=1'
#endif //__LINUX__
			+ ' -I$ProjectBasePath$'
			+ ' -isystem $BuildRootPath$/build.vcpkg/$Triplet$/include'
			+ ' -DSHADERTYPES_H_CPU_TARGET'
			+ ' -DUUID_SYSTEM_GENERATOR'
			+ ' -Wno-deprecated-builtins'
			+ ' -Wno-unknown-attributes'
			+ ' -Wno-unused-function'
			+ ' -Wno-unused-variable'
			+ ' -Wno-unused-private-field'
			+ ' -Wno-missing-braces'
		.CompilerInputPath = '$ProjectBasePath$/rhi'
		.CompilerInputPattern = '*.cpp'
	]

	.GfxLibrary =
	[
		Using(.LibraryCommon)

		.ProjectBasePath = '$BuildRootPath$/src'
		
		.Name = 'gfx'
		.LibraryCompilerOptions = .CompilerOptionsCpp
			+ ' -I$ProjectBasePath$'
			+ ' -isystem $BuildRootPath$/build.vcpkg/$Triplet$/include'
			+ ' -Wno-deprecated-builtins'
			+ ' -Wno-missing-braces'
		.CompilerInputPath = '$ProjectBasePath$/gfx'
		.CompilerInputPattern = '*.cpp'
	]

	.ServerLibrary =
	[
		Using(.LibraryCommon)

		.ProjectBasePath = '$BuildRootPath$/src'
		
		.Name = 'server'
		.LibraryCompilerOptions = .CompilerOptionsCpp
			+ ' -I$ProjectBasePath$'
			+ ' -isystem $BuildRootPath$/build.vcpkg/$Triplet$/include'
			+ ' -DUUID_SYSTEM_GENERATOR'
			+ ' -DZMQ_BUILD_DRAFT_API'
			+ ' -Wno-deprecated-builtins'
			+ ' -Wno-unknown-attributes'
			+ ' -Wno-missing-braces'
		.CompilerInputPath = '$ProjectBasePath$/server'
		.CompilerInputPattern = '*.cpp'
	]

	.ServerObjectList =
	[
		Using(.ObjectListCommon)

		.ProjectBasePath = '$BuildRootPath$/src'
		
		.Name = 'server'
		.ObjectListCompilerOptions = .CompilerOptionsC
			+ ' -I$ProjectBasePath$'
			+ ' -isystem $BuildRootPath$/build.vcpkg/$Triplet$/include'
		.CompilerInputPath = '$ProjectBasePath$/server'
		.CompilerInputPattern = '*.c'
	]

	.ServerExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'server'
		.DependencyObjectLists = {
			.ServerObjectList,
		}
		.DependencyLibraries = {
			.CoreLibrary,
			.ServerLibrary,
		}
		.DependencyDLLs = {
		}
		.CommonExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -lcargs'
			+ ' -lcpptrace'
			+ ' -lTracyClient'
			+ ' -lzmq'
		.ReleaseExecutableLinkerOptions = ' -L$BuildRootPath$/build.vcpkg/$Triplet$/lib'
			+ ' -lmimalloc'
			+ .CommonExecutableLinkerOptions
		.DebugExecutableLinkerOptions = ' -L$BuildRootPath$/build.vcpkg/$Triplet$/debug/lib'
			+ ' -lmimalloc-debug'
			+ .CommonExecutableLinkerOptions
	]

	.ClientLibrary =
	[
		Using(.LibraryCommon)

		.DependencyLibraries = {
			.ServerLibrary,
		}

		.ProjectBasePath = '$BuildRootPath$/src'
		
		.Name = 'client'
		.LibraryCompilerOptions = .CompilerOptionsCpp
			+ ' -I$ProjectBasePath$'
			+ ' -isystem $BuildRootPath$/build.vcpkg/$Triplet$/include'
			+ ' -DUUID_SYSTEM_GENERATOR'
			+ ' -DZMQ_BUILD_DRAFT_API'
			+ ' -Wno-deprecated-builtins'
			+ ' -Wno-unknown-attributes'
			+ ' -Wno-missing-braces'
		.CompilerInputPath = '$ProjectBasePath$/client'
		.CompilerInputPattern = '*.cpp'
	]

	.ClientObjectList =
	[
		Using(.ObjectListCommon)

		.ProjectBasePath = '$BuildRootPath$/src'
		
		.Name = 'client'
		.ObjectListCompilerOptions = .CompilerOptionsC
			+ ' -I$ProjectBasePath$'
			+ ' -isystem $BuildRootPath$/build.vcpkg/$Triplet$/include'
			+ ' -DGLFW_INCLUDE_NONE'
		.CompilerInputPath = '$ProjectBasePath$/client'
		.CompilerInputPattern = '*.c'
	]

	.ClientExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'client'
		.DependencyObjectLists = {
			.ClientObjectList,
		}
		.DependencyLibraries = {
			.CoreLibrary,
			.RhiLibrary,
			.GfxLibrary
			.ClientLibrary,
		}
		.DependencyDLLs = {
		}
		.CommonExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -lcargs'
			+ ' -lcpptrace'
			+ ' -lnfd'
			+ ' -lTracyClient'
			+ ' -lSHA-Intrinsics'
			+ ' -lslang'
			+ ' -lxxhash'
			+ ' -lzmq'
	#if __WINDOWS__
		.CommonExecutableLinkerOptions + ' -ladvapi32'
			+ ' -lgdi32'
			+ ' -lglfw3dll'
			+ ' -lshell32'
			+ ' -lvulkan-1'
			+ ' -lole32'
	#else
		.CommonExecutableLinkerOptions + ' -lglfw'
			+ ' -lvulkan'
	#endif //__WINDOWS__
	#if __OSX__
		.CommonExecutableLinkerOptions + ' -lc++experimental'
			+ ' -framework Cocoa'
			+ ' -framework IOKit'
			+ ' -framework CoreVideo'
	#endif //__OSX__
	#if __LINUX__
		.CommonExecutableLinkerOptions + ' -lm -luuid'
	#endif //__OSX__
		.ReleaseExecutableLinkerOptions = ' -L$BuildRootPath$/build.vcpkg/$Triplet$/lib'
			+ ' -lmimalloc'
			+ ' -limgui'
			+ .CommonExecutableLinkerOptions
		.DebugExecutableLinkerOptions = ' -L$BuildRootPath$/build.vcpkg/$Triplet$/debug/lib'
			+ ' -lmimalloc-debug'
			+ ' -limguid'
			+ .CommonExecutableLinkerOptions
	#if __OSX__
		.ReleaseExecutableLinkerOptions + ' -rpath @executable_path/../../build.vcpkg/$Triplet$/bin'
			+ ' -rpath @executable_path/../../build.vcpkg/$Triplet$/lib'
			+ .CommonExecutableLinkerOptions
		.DebugExecutableLinkerOptions + ' -rpath @executable_path/../../build.vcpkg/$Triplet$/debug/bin'
			+ ' -rpath @executable_path/../../build.vcpkg/$Triplet$/debug/lib'
			+ .CommonExecutableLinkerOptions
	#endif
	]

	.CoreTestsObjectList =
	[
		Using(.ObjectListCommon)

		.ProjectBasePath = '$BuildRootPath$/src/tests'
		
		.Name = 'core-tests'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$BuildRootPath$/src'
			+ ' -isystem $BuildRootPath$/build.vcpkg/$Triplet$/include'
		.CompilerInputPath = '$ProjectBasePath$'
		.CompilerInputPattern = '*.cpp'
	]

	.CoreTestsExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'core-tests'
		.DependencyObjectLists = {
			.CoreTestsObjectList,
		}
		.DependencyLibraries = {
			.CoreLibrary,
		}
		.DependencyDLLs = {
		}
		.CommonExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -lTracyClient'
			+ ' -lcpptrace'
		.ReleaseExecutableLinkerOptions = ' -L$BuildRootPath$/build.vcpkg/$Triplet$/lib/'
			+ ' -lmimalloc'
			+ ' -lCatch2'
			+ .CommonExecutableLinkerOptions
		.DebugExecutableLinkerOptions = ' -L$BuildRootPath$/build.vcpkg/$Triplet$/debug/lib/'
			+ ' -lmimalloc-debug'
			+ ' -lCatch2d'
			+ .CommonExecutableLinkerOptions
	#if __OSX__
		.ReleaseExecutableLinkerOptions + ' -rpath @executable_path/../../build.vcpkg/$Triplet$/lib'
		.DebugExecutableLinkerOptions + ' -rpath @executable_path/../../build.vcpkg/$Triplet$/debug/lib'
	#endif
	]

	.CoreTests =
	[
		Using(.TestCommon)

		.Name = 'core-tests'
		.DependencyExecutables = {
			.CoreTestsExecutable,
		}
		.TestOutputName = 'core-tests'
		.Environment = {
			'PATH=$BuildRootPath$/build.vcpkg/$Triplet$/bin',
#if __OSX__
			'DYLD_LIBRARY_PATH=$BuildRootPath$/build.vcpkg/$Triplet$/lib',
			'DYLD_INSERT_LIBRARIES=libmimalloc$DllSuffix$'
#endif
#if __LINUX__
			'LD_LIBRARY_PATH=$BuildRootPath$/build.vcpkg/$Triplet$/lib',
#endif
		}
		.DebugEnvironment = {
			'PATH=$BuildRootPath$/build.vcpkg/$Triplet$/debug/bin'
#if __OSX__
			'DYLD_LIBRARY_PATH=$BuildRootPath$/build.vcpkg/$Triplet$/debug/lib'
			'DYLD_INSERT_LIBRARIES=libmimalloc-debug$DllSuffix$'
#endif
#if __LINUX__
			'LD_LIBRARY_PATH=$BuildRootPath$/build.vcpkg/$Triplet$/debug/lib'
#endif
		}
	]

	.VisualStudioFilesDir = '$BuildRootPath$/build.visualstudio'

	.AllProject =
	[
		Using(.ProjectCommon)

		.Name = 'all'
		.ProjectBasePath = '$VisualStudioFilesDir$'
		.ProjectBuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache ^$(Configuration)'
		.ProjectRebuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache -clean ^$(Configuration)'
		.ProjectCleanCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide clean-all-^$(Configuration)'
	]

	.NoneProject =
	[
		Using(.ProjectCommon)
		
		.Name = 'none'
		.ProjectBasePath = '$VisualStudioFilesDir$'
	]

	.AllSolution =
	[
		Using(.SolutionCommon)
		
		.Name = '$FBuildProjectName$'
		.ProjectBasePath = '$VisualStudioFilesDir$'
	]

	{
		.GlobalContext =
		[
			.Targets = { }
			.Unities = { }
			.BuildTargets = { }
			.ProjectNames = { }
			.SolutionNames = { }
			// .SolutionDependencies = { }
			// .SolutionFolders = { }
			.ReturnValues = { }
		]

		Using(.GlobalContext)
		
		ForEach(.CompilerConfig in .CompilerConfigs)
		{
			.CompilerConfigContext =
			[
				.Targets = { }
				.BuildTargets = { }
			]

			Using(.CompilerConfigContext)
			Using(.CompilerConfig)
			
			AddExecutable(.ClientExecutable .CompilerConfig)
			AddExecutable(.ServerExecutable .CompilerConfig)
			
			AddTest(.CoreTests .CompilerConfig)

			.Targets + .Unities
			.Targets + .BuildTargets

			//Print('Alias:$ConfigName$')
			//PrintArray('Targets' .Targets)
			Alias('$ConfigName$') {}

			^BuildTargets + .BuildTargets
		}

		{
			.VSContext =
			[
				.Targets = { }
				.ProjectConfigs = { }
				.ProjectConfigNames = { }
				.ProjectNames = { }
				.SolutionNames = { }
				// .SolutionDependencies = { }
				// .SolutionFolders = { }
			]

			Using(.VSContext)

			ForEach(.CompilerConfig in .CompilerConfigs)
			{
				AddProjectConfig(.ArchitectureName .CompilerConfig)
			}

			AddProject(.AllProject .ProjectConfigs .VisualStudioFilesDir)
			AddProject(.NoneProject .ProjectConfigs .VisualStudioFilesDir)

			AddProject(.ClientExecutable .ProjectConfigs .VisualStudioFilesDir)
			AddProject(.ServerExecutable .ProjectConfigs .VisualStudioFilesDir)
			
			AddProject(.CoreTests .ProjectConfigs .VisualStudioFilesDir)

			AddSolution(.AllSolution .ProjectConfigs .ProjectNames .VisualStudioFilesDir)

			.Targets + .ProjectNames
			.Targets + .SolutionNames
			
			//Print('Alias:sln')
			//PrintArray('Targets' .Targets)
			Alias('sln') {}

			^ProjectNames = .ProjectNames
			^SolutionNames = .SolutionNames
		}

		.Targets + .Unities
		.Targets + .BuildTargets
		.Targets + .ProjectNames
		.Targets + .SolutionNames

		//Print('Alias:all')
		//PrintArray('Targets' .Targets)
		Alias('all') {}
	}
}

