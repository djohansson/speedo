#include "bff/buildsystem.bff"

.FBuildProjectName = "speedo"

.CompilerBaseConfig = .Clang_BaseConfig
.CompilerConfigs = .Clang_x86_64_v3_Configs

{
	Using(.CompilerBaseConfig)

	.ClientLibrary =
	[
		Using(.LibraryCommon)

		.ProjectBasePath = '$BuildRootPath$/src'
		
		.Name = 'client'
		.LibraryCompilerOptions = .CompilerOptionsCpp
			+ ' -I$ProjectBasePath$'
			+ ' -I$BuildRootPath$/build.vcpkg-installed/x64-windows-clang/include'
			+ ' -I$VulkanSDKPath$/include'
			+ ' -Wno-unused-function'
			+ ' -Wno-unused-variable'
			+ ' -Wno-ambiguous-reversed-operator'
			+ ' -Wno-unknown-attributes'
			+ ' -DUUID_SYSTEM_GENERATOR'
			+ ' -DSHADERTYPES_H_CPU_TARGET'
			+ ' -DTRACY_ENABLE'
			+ ' -DZPP_BITS_AUTODETECT_MEMBERS_MODE=1'
		.CompilerInputPath = '$ProjectBasePath$'
		.CompilerInputPattern = "*.cpp"
	//	.CompilerInputUnity = '$Name$-unity'
	// 	.UnityInputPath = '$ProjectBasePath$'
	// 	.UnityInputPattern = "*.cpp"
	// 	.UnityInputExcludedFiles = { }
	// 	.UnityOutputPath + '/examples/client'
	// 	.UnityOutputPattern = 'client-unity*.cpp'
	]

	.ClientObjectList =
	[
		Using(.ObjectListCommon)

		.ProjectBasePath = '$BuildRootPath$/src'
		
		.Name = 'client'
		.ObjectListCompilerOptions = .CompilerOptionsC
			+ ' -I$ProjectBasePath$'
			+ ' -I$BuildRootPath$/build.vcpkg-installed/x64-windows-clang/include'
			+ ' -I$VulkanSDKPath$/include'
			+ ' -DGLFW_INCLUDE_NONE'
		.CompilerInputPath = '$ProjectBasePath$'
		.CompilerInputPattern = "*.c"
	//	.CompilerInputUnity = '$Name$-unity'
	// 	.UnityInputPath = '$ProjectBasePath$'
	// 	.UnityInputPattern = "*.cpp"
	// 	.UnityInputExcludedFiles = { }
	// 	.UnityOutputPath + '/examples/client'
	// 	.UnityOutputPattern = 'client-unity*.cpp'
	]

	.ClientExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'client'
		.DependencyObjectLists = {
			.ClientObjectList,
		}
		.DependencyLibraries = {
			.ClientLibrary,
		}
		.DependencyDLLs = {
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -L$VulkanSDKPath$/lib'
			+ ' -L$BuildRootPath$/build.vcpkg-installed/x64-windows-clang/lib'
			+ ' -lmimalloc'
			+ ' -lglfw3dll'
			+ ' -lGLTFSDK'
			+ ' -lTracyClient'
			+ ' -limgui'
			+ ' -lnfd'
			+ ' -lslang'
			+ ' -lxxhash'
	#if __WINDOWS__
		.ExecutableLinkerOptions + ' -ladvapi32'
			+ ' -lgdi32'
			+ ' -lshell32'
			+ ' -lvulkan-1'
			+ ' -lole32'
	#endif //__WINDOWS__
	#if __OSX__
		.ExecutableLinkerOptions + ' -lvulkan'
			+ ' -framework Cocoa'
			+ ' -framework IOKit'
			+ ' -framework CoreVideo'
		//	+ ' -rpath @executable_path/bin/osx-x64/'
	#endif
	]

	.AllProject =
	[
		Using(.ProjectCommon)
		
		.Name = 'all'
		.ProjectBuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache ^$(Configuration)'
		.ProjectRebuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache -clean ^$(Configuration)'
		.ProjectCleanCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide clean-all-^$(Configuration)'
	]

	.NoneProject =
	[
		Using(.ProjectCommon)
		
		.Name = 'none'
	]

	.AllSolution =
	[
		Using(.SolutionCommon)
		
		.Name = '$FBuildProjectName$'
	]

	{
		.GlobalContext =
		[
			.Targets = { }
			.Unities = { }
			.BuildTargets = { }
			.ProjectNames = { }
			.SolutionNames = { }
			// .SolutionDependencies = { }
			// .SolutionFolders = { }
			.ReturnValues = { }
		]

		Using(.GlobalContext)
		
		ForEach(.CompilerConfig in .CompilerConfigs)
		{
			.CompilerConfigContext =
			[
				.Targets = { }
				.BuildTargets = { }
			]

			Using(.CompilerConfigContext)
			Using(.CompilerConfig)
			
			AddExecutable(.ClientExecutable .CompilerConfig)

			.Targets + .Unities
			.Targets + .BuildTargets

			//Print('Alias:$ConfigName$')
			//PrintArray('Targets' .Targets)
			Alias('$ConfigName$') {}

			^BuildTargets + .BuildTargets
		}

		{
			.VSContext =
			[
				.Targets = { }
				.ProjectConfigs = { }
				.ProjectConfigNames = { }
				.ProjectNames = { }
				.SolutionNames = { }
				// .SolutionDependencies = { }
				// .SolutionFolders = { }
			]

			Using(.VSContext)

			ForEach(.CompilerConfig in .CompilerConfigs)
			{
				AddProjectConfig(.ArchitectureName .CompilerConfig)
			}

			AddProject(.AllProject .ProjectConfigs)
			AddProject(.NoneProject .ProjectConfigs)

			AddProject(.ClientExecutable .ProjectConfigs)

			AddSolution(.AllSolution .ProjectConfigs .ProjectNames)

			.Targets + .ProjectNames
			.Targets + .SolutionNames
			
			//Print('Alias:sln')
			//PrintArray('Targets' .Targets)
			Alias('sln') {}

			^ProjectNames = .ProjectNames
			^SolutionNames = .SolutionNames
		}

		.Targets + .Unities
		.Targets + .BuildTargets
		.Targets + .ProjectNames
		.Targets + .SolutionNames

		//Print('Alias:all')
		//PrintArray('Targets' .Targets)
		Alias('all') {}
	}
}

