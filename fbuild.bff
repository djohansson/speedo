#include "clang-config.bff"
#include "vulkan-config.bff"

.RootName = 'slang'
.RootPath = '$_WORKING_DIR_$' // should be '$_CURRENT_BFF_DIR_$' but that seems broken...

.IntermediateFilePath = '$RootPath$/build.intermediate'
.BuildOutputPath = '$RootPath$/build.output'

.AllUnities = { }

.RootObjectLists = { }
.AllObjectLists = { }

.RootLibraries = { }
.AllLibraries = { }

.RootDLLs = { }
.AllDLLs = { }

.RootExecutables = { }
.AllExecutables = { }

.RootTests = { }
.AllTests = { }

.AllBuildConfigs = { }
.AllBuildTargets = { }
.AllProjectConfigs = { }
.AllSolutionConfigs = { }

// Unities
{
	.CoreUnity = 
	[
		.UnityName = 'core-unity'
		.UnityInputPath = '$RootPath$/source/core'
		.UnityInputPattern = "*.cpp"
	#if !__WINDOWS__
	 	.UnityInputExcludePath = '$RootPath$/source/core/windows'
	#else
	 	.UnityInputExcludePath = '$RootPath$/source/core/unix'
	#endif
		.UnityOutputPath = '$IntermediateFilePath$/source/core'
		.UnityOutputPattern = 'core-unity*.cpp'
	]
	^AllUnities + .CoreUnity

	.SlangUnity = 
	[
		.UnityName = 'slang-unity'
		.UnityInputPath = '$RootPath$/source/slang'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/source/slang'
		.UnityOutputPattern = 'slang-unity*.cpp'
	]
	^AllUnities + .SlangUnity

	.GfxUnity = 
	[
		.UnityName = 'gfx-unity'
		.UnityInputPath = '$RootPath$/tools/gfx'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/tools/gfx'
		.UnityOutputPattern = 'gfx-unity*.cpp'
	]
	^AllUnities + .GfxUnity

	.GlfwUnity = 
	[
		.UnityName = 'glfw-unity'
		.UnityInputPath = '$RootPath$/source/glfw'
		.UnityInputFiles = {
			'$RootPath$/external/glfw/src/context.c',
			'$RootPath$/external/glfw/src/init.c',
			'$RootPath$/external/glfw/src/input.c',
			'$RootPath$/external/glfw/src/monitor.c',
			'$RootPath$/external/glfw/src/vulkan.c',
			'$RootPath$/external/glfw/src/window.c',
			'$RootPath$/external/glfw/src/egl_context.c',
			'$RootPath$/external/glfw/src/osmesa_context.c',
		}
	#if __WINDOWS__
		.UnityInputFiles + {
			'$RootPath$/external/glfw/src/win32_init.c',
			'$RootPath$/external/glfw/src/win32_joystick.c',
			'$RootPath$/external/glfw/src/win32_monitor.c',
			'$RootPath$/external/glfw/src/win32_time.c',
			'$RootPath$/external/glfw/src/win32_thread.c',
			'$RootPath$/external/glfw/src/win32_window.c',
			'$RootPath$/external/glfw/src/wgl_context.c',
		}
	#endif
	#if __OSX__
		.UnityInputFiles + {
			'$RootPath$/external/glfw/src/cocoa_time.c',
			'$RootPath$/external/glfw/src/posix_thread.c',
		}
	#endif //__OSX__
	#if __LINUX__
		.UnityInputFiles + {
		    '$RootPath$/external/glfw/src/x11_init.c',
			'$RootPath$/external/glfw/src/x11_monitor.c',
			'$RootPath$/external/glfw/src/x11_window.c',
            '$RootPath$/external/glfw/src/xkb_unicode.c',
			'$RootPath$/external/glfw/src/posix_time.c',
			'$RootPath$/external/glfw/src/posix_thread.c',
			'$RootPath$/external/glfw/src/glx_context.c',
		}
	#endif //__LINUX__
		.UnityOutputPath = '$IntermediateFilePath$/external/glfw'
		.UnityOutputPattern = 'glfw-unity*.c'
	]
	^AllUnities + .GlfwUnity

	.Freetype2Unity = 
	[
		.UnityName = 'freetype2-unity'
		.UnityInputFiles = {
			'$RootPath$/external/freetype2/src/autofit/autofit.c',
			'$RootPath$/external/freetype2/src/base/ftbase.c',
			'$RootPath$/external/freetype2/src/base/ftbbox.c',
			'$RootPath$/external/freetype2/src/base/ftbdf.c',
			'$RootPath$/external/freetype2/src/base/ftbitmap.c',
			'$RootPath$/external/freetype2/src/base/ftcid.c',
			'$RootPath$/external/freetype2/src/base/ftfstype.c',
			'$RootPath$/external/freetype2/src/base/ftgasp.c',
			'$RootPath$/external/freetype2/src/base/ftglyph.c',
			'$RootPath$/external/freetype2/src/base/ftgxval.c',
			'$RootPath$/external/freetype2/src/base/ftinit.c',
			'$RootPath$/external/freetype2/src/base/ftmm.c',
			'$RootPath$/external/freetype2/src/base/ftotval.c',
			'$RootPath$/external/freetype2/src/base/ftpatent.c',
			'$RootPath$/external/freetype2/src/base/ftpfr.c',
			'$RootPath$/external/freetype2/src/base/ftstroke.c',
			'$RootPath$/external/freetype2/src/base/ftsynth.c',
			'$RootPath$/external/freetype2/src/base/ftsystem.c',
			'$RootPath$/external/freetype2/src/base/fttype1.c',
			'$RootPath$/external/freetype2/src/base/ftwinfnt.c',
			'$RootPath$/external/freetype2/src/bdf/bdf.c',
			'$RootPath$/external/freetype2/src/cache/ftcache.c',
			'$RootPath$/external/freetype2/src/cff/cff.c',
			'$RootPath$/external/freetype2/src/cid/type1cid.c',
			'$RootPath$/external/freetype2/src/gzip/ftgzip.c',
			'$RootPath$/external/freetype2/src/lzw/ftlzw.c',
			'$RootPath$/external/freetype2/src/pcf/pcf.c',
			'$RootPath$/external/freetype2/src/pfr/pfr.c',
			'$RootPath$/external/freetype2/src/psaux/psaux.c',
			'$RootPath$/external/freetype2/src/pshinter/pshinter.c',
			'$RootPath$/external/freetype2/src/psnames/psmodule.c',
			'$RootPath$/external/freetype2/src/raster/raster.c',
			'$RootPath$/external/freetype2/src/sfnt/sfnt.c',
			'$RootPath$/external/freetype2/src/smooth/smooth.c',
			'$RootPath$/external/freetype2/src/truetype/truetype.c',
			'$RootPath$/external/freetype2/src/type1/type1.c',
			'$RootPath$/external/freetype2/src/type42/type42.c',
			'$RootPath$/external/freetype2/src/winfonts/winfnt.c',
		}

	#if __WINDOWS__
		.UnityInputFiles + {
			'$RootPath$/external/freetype2/builds/windows/ftdebug.c',
		}
	#else
		.UnityInputFiles + {
			'$RootPath$/external/freetype2/src/base/ftdebug.c',
		}
	#endif

		.UnityOutputPath = '$IntermediateFilePath$/external/freetype2'
		.UnityOutputPattern = 'freetype2-unity*.c'
	]
	^AllUnities + .Freetype2Unity

	.ImguiUnity = 
	[
		.UnityName = 'imgui-unity'
		.UnityInputFiles = {
			'$RootPath$/external/imgui/imgui.cpp'
			'$RootPath$/external/imgui/imgui_demo.cpp'
			'$RootPath$/external/imgui/imgui_draw.cpp'
			'$RootPath$/external/imgui/imgui_widgets.cpp'
			'$RootPath$/external/imgui/misc/freetype/imgui_freetype.cpp'
			'$RootPath$/external/imgui/examples/imgui_impl_opengl3.cpp'
			'$RootPath$/external/imgui/examples/imgui_impl_vulkan.cpp'
			'$RootPath$/external/imgui/examples/imgui_impl_glfw.cpp'
		}

		.UnityOutputPath = '$IntermediateFilePath$/external/imgui'
		.UnityOutputPattern = 'imgui-unity*.cpp'
	]
	^AllUnities + .ImguiUnity

	.TracyUnity = 
	[
		.UnityName = 'tracy-unity'
		.UnityInputFiles = {
			'$RootPath$/external/tracy/common/TracySocket.cpp'
			'$RootPath$/external/tracy/common/TracySystem.cpp'
			'$RootPath$/external/tracy/common/tracy_lz4.cpp'
			'$RootPath$/external/tracy/common/tracy_lz4hc.cpp'
			'$RootPath$/external/tracy/server/TracyBadVersion.cpp'
			'$RootPath$/external/tracy/server/TracyMemory.cpp'
			'$RootPath$/external/tracy/server/TracyPrint.cpp'
			'$RootPath$/external/tracy/server/TracyStorage.cpp'
			'$RootPath$/external/tracy/server/TracyTexture.cpp'
			'$RootPath$/external/tracy/server/TracyThreadCompress.cpp'
			'$RootPath$/external/tracy/server/TracyUserData.cpp'
			'$RootPath$/external/tracy/server/TracyView.cpp'
			'$RootPath$/external/tracy/server/TracyWorker.cpp'
			'$RootPath$/external/tracy/profiler/src/main.cpp'
			'$RootPath$/external/tracy/profiler/src/ResolvService.cpp'
			'$RootPath$/external/tracy/profiler/src/winmain.cpp'
			'$RootPath$/external/tracy/profiler/src/winmainarchdiscovery.cpp'
			'$RootPath$/external/tracy/imguicolortextedit/TextEditor.cpp'
		}

		.UnityOutputPath = '$IntermediateFilePath$/external/tracy'
		.UnityOutputPattern = 'tracy-unity*.cpp'
	]
	^AllUnities + .TracyUnity

	.GlslangUnity = 
	[
		.UnityName = 'glslang-glslang-unity'
		.UnityInputPath = '$RootPath$/external/glslang/glslang'
		.UnityInputPattern = "*.cpp"
		.UnityInputExcludePath = '$RootPath$/external/glslang/glslang/OSDependent'
		.UnityOutputPath = '$IntermediateFilePath$/external/glslang/glslang'
		.UnityOutputPattern = 'glslang-glslang-unity*.cpp'
	]
	^AllUnities + .GlslangUnity

	.GlslangHlslUnity = 
	[
		.UnityName = 'glslang-hlsl-unity'
		.UnityInputPath = '$RootPath$/external/glslang/hlsl'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/external/glslang/hlsl'
		.UnityOutputPattern = 'glslang-hlsl-unity*.cpp'
	]
	^AllUnities + .GlslangHlslUnity

	.GlslangSPIRVUnity = 
	[
		.UnityName = 'glslang-SPIRV-unity'
		.UnityInputPath = '$RootPath$/external/glslang/SPIRV'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/external/glslang/SPIRV'
		.UnityOutputPattern = 'glslang-SPIRV-unity*.cpp'
	]
	^AllUnities + .GlslangSPIRVUnity

	.SlangGlslangUnity = 
	[
		.UnityName = 'slang-glslang-unity'
		.UnityInputPath = '$RootPath$/source/slang-glslang'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/source/slang-glslang'
		.UnityOutputPattern = 'slang-glslang-unity*.cpp'
	]
	^AllUnities + .SlangGlslangUnity

	.VolcanoUnity = 
	[
		.UnityName = 'volcano-unity'
		.UnityInputPath = '$RootPath$/examples/volcano'
		.UnityInputPattern = "*.cpp"
		.UnityInputExcludedFiles = {
			'$RootPath$/examples/volcano/application-glfw.cpp',
			'$RootPath$/examples/volcano/application-vulkan.cpp',
			'$RootPath$/examples/volcano/gfx-vulkan.cpp',
			'$RootPath$/examples/volcano/buffer-vulkan.cpp',
			'$RootPath$/examples/volcano/model-vulkan.cpp',
			'$RootPath$/examples/volcano/texture-vulkan.cpp',
			'$RootPath$/examples/volcano/vk-utils.cpp',
			'$RootPath$/examples/volcano/volcano.cpp',
			'$RootPath$/examples/volcano/main.cpp',
		}
		.UnityOutputPath = '$IntermediateFilePath$/examples/volcano'
		.UnityOutputPattern = 'volcano-unity*.cpp'
	]
	^AllUnities + .VolcanoUnity
}

// ObjectLists
{
	Using(.Clang_BaseConfig)

	.CoreObjectList = 
	[
		.BaseName = 'core'
		.ObjectListCompilerOptions = .CompilerOptionsCpp 
			+ ' -I$RootPath$'
			+ ' -I$RootPath$/source'
			+ ' -Wno-reorder'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-missing-braces'
			+ ' -Wno-macro-redefined'
			+ ' -DSLANG_DYNAMIC_EXPORT'
		.CompilerInputUnity = '$BaseName$-unity'
	]
	^RootObjectLists + .CoreObjectList

	.SlangObjectList = 
	[
		.BaseName = 'slang'
		.ObjectListCompilerOptions = .CompilerOptionsCpp 
			+ ' -I$RootPath$'
			+ ' -I$RootPath$/source'
			+ ' -Wno-undefined-var-template'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-unused-local-typedef'
			+ ' -Wno-unused-variable'
			+ ' -Wno-int-to-pointer-cast'
			+ ' -Wno-reorder'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-switch'
			+ ' -Wno-sometimes-uninitialized'
			+ ' -Wno-missing-braces'
			+ ' -Wno-macro-redefined'
			+ ' -Wno-unused-function'
			+ ' -Wno-invalid-offsetof'
			+ ' -DSLANG_DYNAMIC_EXPORT'
		.CompilerInputUnity = '$BaseName$-unity'
	]
	^RootObjectLists + .SlangObjectList

	.GfxObjectList = 
	[
		.BaseName = 'gfx'
		.ObjectListCompilerOptions = .CompilerOptionsCpp 
			+ ' -I$RootPath$'
			+ ' -I$RootPath$/source'
			+ ' -I$RootPath$/tools'
			+ ' -I$RootPath$/external/imgui'
			+ ' -I$VulkanSDKPath$/include'
			+ ' -Wno-unused-local-typedef'
			+ ' -Wno-int-to-pointer-cast'
			+ ' -Wno-macro-redefined'
			+ ' -Wno-reorder'
			+ ' -Wno-unused-function'
			+ ' -Wno-missing-braces'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -DSLANG_DYNAMIC_EXPORT'
		.CompilerInputUnity = '$BaseName$-unity'
	]
	^RootObjectLists + .GfxObjectList

	.SlangCObjectList = 
	[
		.BaseName = 'slangc'
		.ObjectListCompilerOptions = .CompilerOptionsCpp 
			+ ' -I$RootPath$'
			+ ' -I$RootPath$/source'
			+ ' -Wno-undefined-var-template'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-unused-local-typedef'
			+ ' -Wno-unused-variable'
			+ ' -Wno-int-to-pointer-cast'
			+ ' -Wno-reorder'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-switch'
			+ ' -Wno-sometimes-uninitialized'
			+ ' -Wno-missing-braces'
			+ ' -Wno-macro-redefined'
			+ ' -Wno-unused-function'
			+ ' -Wno-invalid-offsetof'
		.CompilerInputFiles = {
			'$RootPath$/source/slangc/main.cpp',
		}
	]
	^RootObjectLists + .SlangCObjectList

	.TracyClientObjectList =
	[
		.BaseName = 'tracy-client'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$RootPath$/external/tracy'
			+ ' -DTRACY_ENABLE'
		.CompilerInputFiles = {
			'$RootPath$/external/tracy/TracyClient.cpp',
		}
	]
	^RootObjectLists + .TracyClientObjectList

	.TracyObjectList = 
	[
		.BaseName = 'tracy'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$RootPath$/external/tracy/profiler'
			+ ' -I$RootPath$/external/gl3w/include'
			+ ' -I$RootPath$/external/glfw/include'
			+ ' -I$RootPath$/external/freetype2/include'
			+ ' -I$RootPath$/external/nativefiledialog/src/include'
			+ ' -I$RootPath$/external/imgui'
			+ ' -DTRACY_FILESELECTOR'
			+ ' -DTRACY_EXTENDED_FONT'
			+ ' -DTRACY_ROOT_WINDOW'
		.CompilerInputUnity = '$BaseName$-unity'
	]
	^RootObjectLists + .TracyObjectList

	.GlslangOGLCompilersDLLObjectList = 
	[
		.BaseName = 'glslang-OGLCompilersDLL'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$RootPath$/external/glslang/OGLCompilersDLL'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
		.CompilerInputPath = '$RootPath$/external/glslang/OGLCompilersDLL'
	]
	^RootObjectLists + .GlslangOGLCompilersDLLObjectList

	.GlslangGlslangObjectList =
	[
		.BaseName = 'glslang-glslang'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$RootPath$/external/glslang'
				+ ' -I$RootPath$/external/glslang/OGLCompilersDLL'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
		.CompilerInputUnity = '$BaseName$-unity'
	#if __WINDOWS__
		.CompilerInputPath = '$RootPath$/external/glslang/glslang/OSDependent/Windows'
	#else
		.CompilerInputPath = '$RootPath$/external/glslang/glslang/OSDependent/Unix'
	#endif
	]
	^RootObjectLists + .GlslangGlslangObjectList

	.GlslangHlslObjectList =
	[
		.BaseName = 'glslang-hlsl'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$RootPath$/external/glslang'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
		.CompilerInputUnity = '$BaseName$-unity'
	]
	^RootObjectLists + .GlslangHlslObjectList

	.GlslangSPIRVObjectList =
	[
		.BaseName = 'glslang-SPIRV'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$RootPath$/external/glslang'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'	
		.CompilerInputUnity = '$BaseName$-unity'
	]
	^RootObjectLists + .GlslangSPIRVObjectList

	.SlangGlslangObjectList =
	[
		.BaseName = 'slang-glslang'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$RootPath$/external/glslang'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
		.CompilerInputUnity = '$BaseName$-unity'
	]
	^RootObjectLists + .SlangGlslangObjectList

	.HelloWorldObjectList =
	[
		.BaseName = 'hello-world'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$RootPath$'
			+ ' -I$RootPath$/source'
			+ ' -I$RootPath$/tools'
		.CompilerInputPath = '$RootPath$/examples/hello-world'
	]
	^RootObjectLists + .HelloWorldObjectList

	.ModelViewerObjectList =
	[
		.BaseName = 'model-viewer'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$RootPath$'
			+ ' -I$RootPath$/source'
			+ ' -I$RootPath$/tools'
			+ ' -I$RootPath$/external/imgui'
		.CompilerInputPath = '$RootPath$/examples/model-viewer'
	]
	^RootObjectLists + .ModelViewerObjectList

	.VolcanoObjectList =
	[
		.BaseName = 'volcano'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$RootPath$'
			+ ' -I$RootPath$/source'
			+ ' -I$RootPath$/external/glm'
			+ ' -I$RootPath$/external/xxhash'
			+ ' -I$RootPath$/external/stb'
			+ ' -I$RootPath$/external/tinyobjloader'
			+ ' -I$RootPath$/external/glfw/include'
			+ ' -I$RootPath$/external/VulkanMemoryAllocator/src'
			+ ' -I$RootPath$/external/imgui'
			+ ' -I$RootPath$/external/cereal/include'
			+ ' -I$RootPath$/external/picosha2'
			+ ' -I$RootPath$/external/mio/include'
			+ ' -I$RootPath$/external/nativefiledialog/src/include'
			+ ' -I$RootPath$/external/tracy/nfd'
			+ ' -I$RootPath$/external/tracy'
			+ ' -I$VulkanSDKPath$/include'
			+ ' -D_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING'
			+ ' -DTRACY_ENABLE'
		.CompilerInputUnity = 'volcano-unity'
		.CompilerInputFiles = {
			'$RootPath$/examples/volcano/application-glfw.cpp',
			'$RootPath$/examples/volcano/application-vulkan.cpp',
			'$RootPath$/examples/volcano/gfx-vulkan.cpp',
			'$RootPath$/examples/volcano/buffer-vulkan.cpp',
			'$RootPath$/examples/volcano/model-vulkan.cpp',
			'$RootPath$/examples/volcano/texture-vulkan.cpp',
			'$RootPath$/examples/volcano/vk-utils.cpp',
			'$RootPath$/examples/volcano/volcano.cpp',
			'$RootPath$/examples/volcano/main.cpp',
		}
	]
	^RootObjectLists + .VolcanoObjectList

	.MioTestObjectList =
	[
		.BaseName = 'mio-test'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$RootPath$/external/mio/include'
		.CompilerInputFiles = {
			'$RootPath$/external/mio/test/test.cpp',
		}
	]
	^RootObjectLists + .MioTestObjectList
}

// Libraries
{
	Using(.Clang_BaseConfig)

	.GlfwLibrary =
	[
		.BaseName = 'glfw'
		.LibraryCompilerOptions = .CompilerOptionsC
	#if __WINDOWS__
			+ ' -D_GLFW_WIN32=1'
	#endif
	#if __OSX__
			+ ' -D_GLFW_COCOA=1'
	#endif //__OSX__
	#if __LINUX__
			+ ' -D_GLFW_X11=1'
	#endif //__LINUX__
		.CompilerInputUnity = '$BaseName$-unity'
	#if __OSX__
		.CompilerInputFiles = {
			'$RootPath$/external/glfw/src/cocoa_init.m',
			'$RootPath$/external/glfw/src/cocoa_joystick.m',
            '$RootPath$/external/glfw/src/cocoa_monitor.m',
			'$RootPath$/external/glfw/src/cocoa_window.m',
			'$RootPath$/external/glfw/src/nsgl_context.m',
		}
	#endif //__OSX__
	]
	^RootLibraries + .GlfwLibrary

	.XXHashLibrary = 
	[
		.BaseName = 'xxhash'
		.LibraryCompilerOptions = .CompilerOptionsC
		.CompilerInputFiles = {
			'$RootPath$/external/xxhash/xxhash.c',
		}
	]
	^RootLibraries + .XXHashLibrary

	.Freetype2Library = 
	[
		.BaseName = 'freetype2'
		.LibraryCompilerOptions = .CompilerOptionsC
			+ ' -I$RootPath$/external/freetype2/include'
			+ ' -DFT2_BUILD_LIBRARY'
		.CompilerInputUnity = '$BaseName$-unity'
	]
	^RootLibraries + .Freetype2Library

	.ImguiLibrary = 
	[
		.BaseName = 'imgui'
		.LibraryCompilerOptions = .CompilerOptionsCpp
			+ ' -I$RootPath$/external/imgui'
			+ ' -I$RootPath$/external/gl3w/include'
			+ ' -I$RootPath$/external/glfw/include'
			+ ' -I$RootPath$/external/freetype2/include'
			+ ' -I$VulkanSDKPath$/include'
		.CompilerInputUnity = '$BaseName$-unity'
	]
	^RootLibraries + .ImguiLibrary

	.Gl3wLibrary =
	[
		.BaseName = 'gl3w'
		.LibraryCompilerOptions = .CompilerOptionsC
			+ ' -I$RootPath$/external/gl3w/include'
		.CompilerInputFiles = {
			'$RootPath$/external/gl3w/src/gl3w.c',
		}
	]
	^RootLibraries + .Gl3wLibrary

	.NFDLibrary = 
	[
		.BaseName = 'nativefiledialog'
		.LibraryCompilerOptions = ' -I$RootPath$/external/nativefiledialog/src/include'
	#if __WINDOWS__
		//.LibraryCompilerOptions + .CompilerOptionsCpp
		.CompilerInputFiles = {
			'$RootPath$/external/nativefiledialog/src/nfd_common.c',
			'$RootPath$/external/nativefiledialog/src/nfd_win.cpp',
		}
	#endif
	#if __OSX__
		.LibraryCompilerOptions + .CompilerOptionsC
		.CompilerInputFiles = {
			'$RootPath$/external/nativefiledialog/src/nfd_common.c',
			'$RootPath$/external/nativefiledialog/src/nfd_cocoa.m',
		}
	#endif
	#if __LINUX__
		.LibraryCompilerOptions + .CompilerOptionsC
		.CompilerInputFiles = {
			'$RootPath$/external/nativefiledialog/src/nfd_common.c',
			'$RootPath$/external/nativefiledialog/src/nfd_gtk.c',
		}
	#endif
	]
	^RootLibraries + .NFDLibrary
}

// DLLs
{
	Using(.Clang_BaseConfig)

	.SlangDLL = 
	[
		.BaseName = 'slang'
		.Dependencies = {
			'core-obj',
			'slang-obj',
			'gfx-obj',
		}
		.DLLLinkerOptions = .LinkerOptionsCpp 
			+ ' -shared'
	#if __WINDOWS__
		.DLLLinkerOptions + ' -lshell32'
			+ ' -lgdi32'
			+ ' -ladvapi32'
		.LinkerType = 'msvc'
	#endif //__WINDOWS__
	]
	^RootDLLs + .SlangDLL

	.SlangGlslangDLL =
	[
		.BaseName = 'slang-glslang'
		.Dependencies = {
			'slang-glslang-obj',
			'glslang-glslang-obj',
			'glslang-hlsl-obj',
			'glslang-OGLCompilersDLL-obj',
			'glslang-SPIRV-obj',
		}
		.DLLLinkerOptions = .LinkerOptionsCpp
			+ ' -shared'
	#if __WINDOWS__
		.DLLLinkerOptions + ' -ladvapi32'
			+ ' -lshell32'
			+ ' -lopengl32'
			+ ' -lglu32'
	#endif //__WINDOWS__
	]
	^RootDLLs + .SlangGlslangDLL
}

// Executables
{
	Using(.Clang_BaseConfig)

	.SlangCExecutable = 
	[
		.BaseName = 'slangc'
		.Dependencies = {
			'slangc-obj',
			'slang-dll',
		}

		.ExecutableLinkerOptions = .LinkerOptionsCpp
	]
	^RootExecutables + .SlangCExecutable

	.TracyExecutable = 
	[
		.BaseName = 'tracy'
		.Dependencies = {
			'gl3w-lib',
			'glfw-lib',
			'imgui-lib',
			'freetype2-lib',
			'nativefiledialog-lib'
			'tracy-obj',
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -L$VulkanSDKPath$/lib'
	#if __WINDOWS__
		.ExecutableLinkerOptions + ' -ladvapi32'
			+ ' -lgdi32'
			+ ' -lshell32'
			+ ' -lole32'
			+ ' -lws2_32'
			+ ' -lvulkan-1'
			+ ' -lopengl32'
			+ ' -lglu32'
	#endif //__WINDOWS__
	#if __OSX__
		 .ExecutableLinkerOptions + ' -lvulkan'
			+ ' -framework Cocoa'
			+ ' -framework IOKit'
			+ ' -framework CoreVideo'
		//	+ ' -rpath @executable_path/bin/osx-x64/'
	#endif
	]
	^RootExecutables + .TracyExecutable

	.HelloWorldExecutable = 
	[
		.BaseName = 'hello-world'
		.Dependencies = {
			'slang-dll',
			'hello-world-obj',
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
	#if __WINDOWS__
		.ExecutableLinkerOptions + ' -lgdi32'
	#endif //__WINDOWS__
	]
	^RootExecutables + .HelloWorldExecutable

	.ModelViewerExecutable = 
	[
		.BaseName = 'model-viewer'
		.Dependencies = {
			'slang-dll',
			'gl3w-lib',
			'glfw-lib',
			'imgui-lib',
			'freetype2-lib',
			'model-viewer-obj',
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -L$VulkanSDKPath$/lib'
	#if __WINDOWS__
		.ExecutableLinkerOptions + ' -ladvapi32'
			+ ' -lgdi32'
			+ ' -lshell32'
			+ ' -lvulkan-1'
	#endif //__WINDOWS__
	]
	^RootExecutables + .ModelViewerExecutable

	.VolcanoExecutable = 
	[
		.BaseName = 'volcano'
		.Dependencies = {
			'slang-dll',
			'gl3w-lib',
			'glfw-lib',
			'xxhash-lib',
			'imgui-lib',
			'freetype2-lib',
			'nativefiledialog-lib'
			'tracy-client-obj',
			'volcano-obj',
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -L$VulkanSDKPath$/lib'
	#if __WINDOWS__
		.ExecutableLinkerOptions + ' -ladvapi32'
			+ ' -lgdi32'
			+ ' -lshell32'
			+ ' -lvulkan-1'
			+ ' -lole32'
	#endif //__WINDOWS__
	#if __OSX__
		.ExecutableLinkerOptions + ' -lc++fs'
			+ ' -lvulkan'
			+ ' -framework Cocoa'
			+ ' -framework IOKit'
			+ ' -framework CoreVideo'
		//	+ ' -rpath @executable_path/bin/osx-x64/'
	#endif
	]
	^RootExecutables + .VolcanoExecutable

	.MioTestExecutable =
	[
		.BaseName = 'mio'
		.Dependencies = {
			'mio-test-obj',
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
	]
	^RootExecutables + .MioTestExecutable
}

// Tests
{
	.MioTest =
	[
		.BaseName = 'mio'
	]
	^RootTests + .MioTest
}

// Process all compiler configs
ForEach(.CompilerConfig in .Clang_x64_Configs)
{
	.Clang_x64_ProjectConfig =
	[
		Using(.CompilerConfig)

		.Platform = .ArchInfo
		.Config = .ConfigName
	]
	^AllProjectConfigs + .Clang_x64_ProjectConfig;

	.Clang_x64_SolutionConfig = 
	[
		Using(.CompilerConfig)
		
		.Platform = .ArchInfo
		.Config = .ConfigName
	]
	^AllSolutionConfigs + .Clang_x64_SolutionConfig

	.LocalObjectLists = { }
	ForEach(.RootObjectList in .RootObjectLists)
	{
		.ObjectList = 
		[
			Using(.RootObjectList)
			Using(.CompilerConfig)

			.ObjectListName = '$BaseName$-obj-$ConfigName$'

			.CompilerOptions + .ObjectListCompilerOptions
			.CompilerOutputPath = '$IntermediateFilePath$/$BaseName$/$ConfigName$'
		]
		^LocalObjectLists + .ObjectList
	}
	^AllObjectLists + .LocalObjectLists

	.LocalLibraries = { }
	ForEach(.RootLibrary in .RootLibraries)
	{
		.Library = 
		[
			Using(.RootLibrary)
			Using(.CompilerConfig)

			.LibraryName = '$BaseName$-lib-$ConfigName$'

			.CompilerOptions + .LibraryCompilerOptions
			.CompilerOutputPath = '$IntermediateFilePath$/$BaseName$/$ConfigName$'

			.LibrarianOutput = '$BuildOutputPath$/$ConfigName$/$LibPrefix$$BaseName$$LibSuffix$'
		]
		^LocalLibraries + .Library
	}
	^AllLibraries + .LocalLibraries

	.LocalDLLs = { }
	ForEach(.RootDLL in .RootDLLs)
	{
		.DLL = 
		[
			Using(.RootDLL)
			Using(.CompilerConfig)

			.DLLName = '$BaseName$-dll-$ConfigName$'

			.Libraries = { }
			ForEach(.Dependency in .Dependencies)
			{
				^Libraries + '$Dependency$-$ConfigName$'
			}

			.LinkerOptions + .DLLLinkerOptions
			.LinkerOutput = '$BuildOutputPath$/$ConfigName$/$DllPrefix$$BaseName$$DllSuffix$'
		]
		^LocalDLLs + .DLL
	}
	^AllDLLs + .LocalDLLs

	.LocalExecutables = { }
	ForEach(.RootExecutable in .RootExecutables)
	{
		.Executable = 
		[
			Using(.RootExecutable)
			Using(.CompilerConfig)

			.ExecutableName = '$BaseName$-exe-$ConfigName$'

			.Libraries = { }
			ForEach(.Dependency in .Dependencies)
			{
				^Libraries + '$Dependency$-$ConfigName$'
			}

			.LinkerOptions + .ExecutableLinkerOptions
			.LinkerOutput = '$BuildOutputPath$/$ConfigName$/$BaseName$$ExeSuffix$'
		]
		^LocalExecutables + .Executable
	}
	^AllExecutables + .LocalExecutables

	.LocalTests = { }
	ForEach(.RootTest in .RootTests)
	{
		.Test = 
		[
			Using(.RootTest)
			Using(.CompilerConfig)

			.TestName = '$BaseName$-test-$ConfigName$'

			.TestExecutable = '$BaseName$-exe-$ConfigName$'
		 	.TestOutput = '$IntermediateFilePath$/$TestName$-output'
		 	.TestWorkingDir = '$IntermediateFilePath$'
		]
		^LocalTests + .Test
	}
	^AllTests + .LocalTests

	.LocalBuildConfigs = { }
	{
		.BuildConfig = 
		[
			Using(.CompilerConfig)

			.BuildConfigName = '$ConfigName$'

			.Targets = { }
			ForEach(.Library in .LocalLibraries)
			{
				Using (.Library)
				^Targets + '$LibraryName$'
			}
			ForEach(.DLL in .LocalDLLs)
			{
				Using (.DLL)
				^Targets + '$DLLName$'
			}
			ForEach(.Executable in .LocalExecutables)
			{
				Using (.Executable)
				^Targets + '$ExecutableName$'
			}
			ForEach(.Test in .LocalTests)
			{
				Using (.Test)
				^Targets + '$TestName$'
			}
		]
		^LocalBuildConfigs + .BuildConfig
	}
	^AllBuildConfigs + .LocalBuildConfigs
}

ForEach(.Unity in .AllUnities)
{
	Using(.Unity)
	//Print(.UnityName)
	Unity('$UnityName$') {}
}

ForEach(.ObjectList in .AllObjectLists)
{
	Using(.ObjectList)
	//Print(.ObjectListName)
	//Print(.CompilerOptions)
	ObjectList('$ObjectListName$') {}
}

ForEach(.Library in .AllLibraries)
{
	Using(.Library)
	//Print(.LibraryName)
	//Print(.CompilerOptions)
	ObjectList('$LibraryName$') {}
}

ForEach(.DLL in .AllDLLs)
{
	Using(.DLL)
	//Print(.DLLName)
	//Print(.LinkerOptions)
	DLL('$DLLName$') {}
}

ForEach(.Executable in .AllExecutables)
{
	Using(.Executable)
	//Print(.ExecutableName)
	//Print(.LinkerOptions)
	Executable('$ExecutableName$') {}
}

ForEach(.Test in .AllTests)
{
	Using(.Test)
	//Print(.TestName)
	Test('$TestName$') {}
}

ForEach(.BuildConfig in .AllBuildConfigs)
{
	Using(.BuildConfig)
	//Print(.BuildConfigName)
	Alias('$BuildConfigName$') {}
	^AllBuildTargets + .BuildConfigName
}

#if __WINDOWS__
.AllSolutionProjects = { }
// .AllSolutionFolders = { }
// .AllSolutionDependencies = { }
{
	.ProjectCommon = 
	[
		.ProjectBuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache ^$(ProjectName)-^$(Configuration)'
		.ProjectRebuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache -clean ^$(ProjectName)-^$(Configuration)'
		.ProjectCleanCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide Clean-^$(ProjectName)-^$(Configuration)'
		.OutputDirectory = '$BuildOutputPath$'
		.IntermediateDirectory = '$IntermediateFilePath$'
		.Platform = 'x64'
		.PlatformToolset = 'llvm'
		//.X64Defines               = 'WIN32_LEAN_AND_MEAN;_WIN32;__WINDOWS__;WIN64;'
		//.DebugDefines             = 'DEBUG;PROFILING_ENABLED'
		//.ProfileDefines           = 'RELEASE;PROFILING_ENABLED'
		//.ReleaseDefines           = 'RELEASE'						  
	]
	
	{
		.ProjectName = 'slang-dll-vcxproj'

		VCXProject('$ProjectName$')
		{
			Using(.ProjectCommon)

			.ProjectOutput = '$RootPath$/slang-dll.vcxproj'
			.ProjectInputPaths = '$RootPath$/source/slang'
			.ProjectInputExcludePath = '$RootPath$/source/core/unix'
			.ProjectBasePath = '$RootPath$/source/slang'
			.Output = '$BuildOutputPath$/^$(Configuration)/$DllPrefix$slang$DllSuffix$'
			.ProjectConfigs = .AllProjectConfigs
		}
		^AllSolutionProjects + '$ProjectName$'

		// .SolutionDependency = 
		// [
		// 	.Projects = { .ProjectName }
		// 	.Dependencies = { }
		// ]
		// ^AllSolutionDependencies + .SolutionDependency

		// .SolutionFolder = 
		// [
		// 	.Path = '/slang'
		// 	.Projects = { .ProjectName }
		// ]
		// ^AllSolutionFolders + .SolutionFolder
	}

	{
		VSSolution('vssolution')
		{
			.SolutionOutput = '$RootPath$/$RootName$.sln'
			.SolutionProjects = .AllSolutionProjects
			.SolutionConfigs = .AllSolutionConfigs
			//.SolutionFolders = .AllSolutionFolders
			//.SolutionDependencies = .AllSolutionDependencies
			//.SolutionVisualStudioVersion        // (optional) Version of Solution (default "14.0.22823.1" VS2015 RC)
			//.SolutionMinimumVisualStudioVersion // (optional) Min version of Solution (default "10.0.40219.1" VS2010 Express)
			//.SolutionBuildProject               // (optional) Project(s) set to build when "Build Solution" is selected
			//.SolutionDeployProjects             // (optional) Project(s) set deploy
		}
		^AllBuildTargets + 'vssolution'
	}
}
#endif

Alias('all')
{
	.Targets = .AllBuildTargets
}
