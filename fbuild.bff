#include "platform-config.bff"
#include "clang-config.bff"
#include "python-config.bff"
#include "vulkan-config.bff"

#include "buildsystem.bff"

.BuildName = 'slang'

{
	Using(.Clang_BaseConfig)

	.CoreUnity = 
	[
		.UnityInputPath = '$BuildRootPath$/source/core'
		.UnityInputPattern = "*.cpp"
	#if !__WINDOWS__
		.UnityInputExcludePath = '$BuildRootPath$/source/core/windows'
	#else
		.UnityInputExcludePath = '$BuildRootPath$/source/core/unix'
	#endif
		.UnityOutputPath = '$IntermediateFilePath$/source/core'
		.UnityOutputPattern = 'core-unity*.cpp'
	]
	.CoreObjectList = 
	[
		Using(.ObjectListCommon)
		Using(.CoreUnity)

		.Name = 'core'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$BuildRootPath$'
			+ ' -I$BuildRootPath$/source'
			+ ' -Wno-reorder'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-missing-braces'
			+ ' -Wno-macro-redefined'
			+ ' -DSLANG_DYNAMIC_EXPORT'
		.CompilerInputUnity = '$Name$-unity'
	]

	.SlangGenerateObjectList = 
	[
		Using(.ObjectListCommon)

		.Name = 'slang-generate'
		.ObjectListCompilerOptions = .CompilerOptionsCpp 
			+ ' -I$BuildRootPath$/tools/slang-generate'
		.CompilerInputPath = '$BuildRootPath$/tools/slang-generate'
	]

	.SlangGenerateExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'slang-generate'
		.DependencyObjectLists = {
			.SlangGenerateObjectList,
			.CoreObjectList
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
	#if __WINDOWS__
			+ ' -ladvapi32'
			+ ' -lshell32'
	#endif //__WINDOWS__
	]

	.SlangGenerateTask =
	[
		Using(.TaskCommon)

		.Name = 'slang-generate'

		.DependencyExecutables = { .SlangGenerateExecutable }

		.ExecInputPattern = '*.meta.slang'
		.ExecInputPath = '$BuildRootPath$/source/slang'
		.ExecArguments = '-o %2 %1'
		.ExecOutput + '/include/core.meta.slang.h'
	]

	.SlangCPPExtractorObjectList = 
	[
		Using(.ObjectListCommon)

		.Name = 'slang-cpp-extractor'
		.ObjectListCompilerOptions = .CompilerOptionsCpp 
			+ ' -I$BuildRootPath$'
			+ ' -I$BuildRootPath$/source'
			+ ' -I$BuildRootPath$/tools/slang-cpp-extractor'
			+ ' -Wno-undefined-var-template'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-unused-local-typedef'
			+ ' -Wno-unused-variable'
			+ ' -Wno-int-to-pointer-cast'
			+ ' -Wno-reorder'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-switch'
			+ ' -Wno-sometimes-uninitialized'
			+ ' -Wno-missing-braces'
			+ ' -Wno-macro-redefined'
			+ ' -Wno-unused-function'
			+ ' -Wno-invalid-offsetof'
			+ ' -DSLANG_STATIC'
		.CompilerInputPath = '$BuildRootPath$/tools/slang-cpp-extractor'
		.CompilerInputFiles = {
			'$BuildRootPath$/source/slang/slang-lexer.cpp',
			'$BuildRootPath$/source/slang/slang-source-loc.cpp',
			'$BuildRootPath$/source/slang/slang-file-system.cpp',
			'$BuildRootPath$/source/slang/slang-diagnostics.cpp',
			'$BuildRootPath$/source/slang/slang-name.cpp',
			'$BuildRootPath$/source/slang/slang-token.cpp',
		}
	]

	.SlangCPPExtractorExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'slang-cpp-extractor'
		.DependencyObjectLists = {
			.SlangCPPExtractorObjectList,
			.CoreObjectList
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
	#if __WINDOWS__
			+ ' -ladvapi32'
			+ ' -lshell32'
	#endif //__WINDOWS__
	]

	.SlangCPPExtractorTask =
	[
		Using(.TaskCommon)

		.Name = 'slang-cpp-extractor'

		.DependencyExecutables = { .SlangCPPExtractorExecutable }

		.ExecInput = {
			'$BuildRootPath$/source/slang/slang-ast-base.h',
			'$BuildRootPath$/source/slang/slang-ast-decl.h',
			'$BuildRootPath$/source/slang/slang-ast-expr.h',
			'$BuildRootPath$/source/slang/slang-ast-modifier.h',
			'$BuildRootPath$/source/slang/slang-ast-stmt.h',
			'$BuildRootPath$/source/slang/slang-ast-type.h',
			'$BuildRootPath$/source/slang/slang-ast-val.h',
		}
		.ExecArguments = '-o %2 %1 -strip-prefix slang-ast- -output-fields'
		.ExecOutput + '/include/slang-ast-generated.h'
	]

	// .SlangUnity = 
	// [
	// 	.UnityInputPath = '$BuildRootPath$/source/slang'
	// 	.UnityInputPattern = "*.cpp"
	// 	.UnityOutputPath = '$IntermediateFilePath$/source/slang'
	// 	.UnityOutputPattern = 'slang-unity*.cpp'
	// ]
	.SlangObjectList = 
	[
		Using(.ObjectListCommon)
		//Using(.SlangUnity)

		.Name = 'slang'
		.DependencyTasks = { .SlangGenerateTask, .SlangCPPExtractorTask }
		.ObjectListCompilerOptions = .CompilerOptionsCpp 
			+ ' -I$BuildRootPath$'
			+ ' -I$BuildRootPath$/source'
			+ ' -I$BuildRootPath$/external/spirv-headers/include'
			+ ' -Wno-undefined-var-template'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-unused-local-typedef'
			+ ' -Wno-unused-variable'
			+ ' -Wno-int-to-pointer-cast'
			+ ' -Wno-reorder'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-switch'
			+ ' -Wno-sometimes-uninitialized'
			+ ' -Wno-missing-braces'
			+ ' -Wno-macro-redefined'
			+ ' -Wno-unused-function'
			+ ' -Wno-invalid-offsetof'
			+ ' -Wno-unknown-escape-sequence'
			+ ' -DSLANG_DYNAMIC_EXPORT'
		.ConfigDependentCompilerOptions = {
			' -I$IntermediateFilePath$/slang-generate',
			' -I$IntermediateFilePath$/slang-cpp-extractor',
		}
		//.CompilerInputUnity = '$Name$-unity'
		.CompilerInputPath = '$BuildRootPath$/source/slang'
	]

#if __WINDOWS__
	.GfxUnity = 
	[
		.UnityInputPath = '$BuildRootPath$/tools/gfx'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/tools/gfx'
		.UnityOutputPattern = 'gfx-unity*.cpp'
	]
	.GfxObjectList = 
	[
		Using(.ObjectListCommon)
		Using(.GfxUnity)

		.Name = 'gfx'
		.ObjectListCompilerOptions = .CompilerOptionsCpp 
			+ ' -I$BuildRootPath$'
			+ ' -I$BuildRootPath$/source'
			+ ' -I$BuildRootPath$/tools'
			+ ' -I$BuildRootPath$/external/imgui'
			+ ' -I$VulkanSDKPath$/include'
			+ ' -Wno-unused-local-typedef'
			+ ' -Wno-int-to-pointer-cast'
			+ ' -Wno-macro-redefined'
			+ ' -Wno-reorder'
			+ ' -Wno-unused-function'
			+ ' -Wno-missing-braces'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -DSLANG_DYNAMIC_EXPORT'
		.CompilerInputUnity = '$Name$-unity'
	]
#endif

	.SlangCObjectList = 
	[
		Using(.ObjectListCommon)

		.Name = 'slangc'
		.ObjectListCompilerOptions = .CompilerOptionsCpp 
			+ ' -I$BuildRootPath$'
			+ ' -I$BuildRootPath$/source'
			+ ' -Wno-undefined-var-template'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-unused-local-typedef'
			+ ' -Wno-unused-variable'
			+ ' -Wno-int-to-pointer-cast'
			+ ' -Wno-reorder'
			+ ' -Wno-inconsistent-missing-override'
			+ ' -Wno-switch'
			+ ' -Wno-sometimes-uninitialized'
			+ ' -Wno-missing-braces'
			+ ' -Wno-macro-redefined'
			+ ' -Wno-unused-function'
			+ ' -Wno-invalid-offsetof'
		.CompilerInputFiles = {
			'$BuildRootPath$/source/slangc/main.cpp',
		}
	]

	.Gl3wGenerateTask =
	[
		Using(.TaskCommon)

		.Name = 'gl3w-generate'
		.ExecExecutable = '$PythonExecutable$'
		.ExecInput = '$BuildRootPath$/external/gl3w/gl3w_gen.py'
		.ExecArguments = '%1'
		.ExecOutput + '/src/gl3w.c'
	]

	.Gl3wLibrary =
	[
		Using(.LibraryCommon)

		.Name = 'gl3w'
		.DependencyTasks = { .Gl3wGenerateTask }
		.LibraryCompilerOptions = .CompilerOptionsC
			+ ' -I$BuildRootPath$/external/gl3w/include'
		.ConfigDependentCompilerOptions = {
			' -I$IntermediateFilePath$/gl3w-generate',
		}
		.CompilerInputPattern = '*.c'
		.CompilerInputPath = '$IntermediateFilePath$/gl3w-generate'
		.UseConfigDependentInputPath = true
	]

	.TracyClientObjectList =
	[
		Using(.ObjectListCommon)
		
		.Name = 'tracy-client'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$BuildRootPath$/external/tracy'
			+ ' -DTRACY_ENABLE'
		.CompilerInputFiles = {
			'$BuildRootPath$/external/tracy/TracyClient.cpp',
		}
	]

	.TracyUnity = 
	[
		.UnityInputFiles = {
			'$BuildRootPath$/external/tracy/common/TracySocket.cpp'
			'$BuildRootPath$/external/tracy/common/TracySystem.cpp'
			'$BuildRootPath$/external/tracy/common/tracy_lz4.cpp'
			'$BuildRootPath$/external/tracy/common/tracy_lz4hc.cpp'
			'$BuildRootPath$/external/tracy/server/TracyBadVersion.cpp'
			'$BuildRootPath$/external/tracy/server/TracyColor.cpp'
			'$BuildRootPath$/external/tracy/server/TracyFilesystem.cpp'
			'$BuildRootPath$/external/tracy/server/TracyMemory.cpp'
			'$BuildRootPath$/external/tracy/server/TracyMmap.cpp'
			'$BuildRootPath$/external/tracy/server/TracyPrint.cpp'
			'$BuildRootPath$/external/tracy/server/TracyStorage.cpp'
			'$BuildRootPath$/external/tracy/server/TracySourceView.cpp'
			'$BuildRootPath$/external/tracy/server/TracyTexture.cpp'
			'$BuildRootPath$/external/tracy/server/TracyTextureCompression.cpp'
			'$BuildRootPath$/external/tracy/server/TracyTaskDispatch.cpp'
			'$BuildRootPath$/external/tracy/server/TracyThreadCompress.cpp'
			'$BuildRootPath$/external/tracy/server/TracyUserData.cpp'
			'$BuildRootPath$/external/tracy/server/TracyView.cpp'
			'$BuildRootPath$/external/tracy/server/TracyWorker.cpp'
			'$BuildRootPath$/external/tracy/profiler/src/main.cpp'
			'$BuildRootPath$/external/tracy/profiler/src/ResolvService.cpp'
			'$BuildRootPath$/external/tracy/profiler/src/winmain.cpp'
			'$BuildRootPath$/external/tracy/profiler/src/winmainarchdiscovery.cpp'
		}

		.UnityOutputPath = '$IntermediateFilePath$/external/tracy'
		.UnityOutputPattern = 'tracy-unity*.cpp'
	]
	.TracyObjectList = 
	[
		Using(.ObjectListCommon)
		Using(.TracyUnity)
		
		.Name = 'tracy'
		.DependencyTasks = { .Gl3wGenerateTask }
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$BuildRootPath$/external/tracy/profiler'
			+ ' -I$BuildRootPath$/external/capstone/include'
			+ ' -I$BuildRootPath$/external/glfw/include'
			+ ' -I$BuildRootPath$/external/freetype2/include'
			+ ' -I$BuildRootPath$/external/nativefiledialog/src/include'
			+ ' -I$BuildRootPath$/external/imgui'
			+ ' -I$BuildRootPath$/external/stb'
			+ ' -I$BuildRootPath$/external/xxhash'
			+ ' -I$BuildRootPath$/external/zstd/lib'
			+ ' -DTRACY_FILESELECTOR'
			+ ' -DTRACY_EXTENDED_FONT'
			+ ' -DTRACY_ROOT_WINDOW'
#if !__WINDOWS__
			+ ' -DNO_PARALLEL_SORT'
#endif
		.ConfigDependentCompilerOptions = {
			' -I$IntermediateFilePath$/gl3w-generate',
		}
		.CompilerInputUnity = '$Name$-unity'
		.CompilerInputFiles = {
			'$BuildRootPath$/external/tracy/server/TracyMicroArchitecture.cpp'
		}
	]

	.GlslangOGLCompilersDLLObjectList = 
	[
		Using(.ObjectListCommon)

		.Name = 'glslang-OGLCompilersDLL'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$BuildRootPath$/external/glslang/OGLCompilersDLL'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=0'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
		.CompilerInputPath = '$BuildRootPath$/external/glslang/OGLCompilersDLL'
	]

	.GlslangGenerateTask =
	[
		Using(.TaskCommon)

		.Name = 'glslang-generate'
		.ExecExecutable = '$PythonExecutable$'
		.ExecInput = '$BuildRootPath$/external/glslang/build_info.py'
		.ExecArguments = '%1 $BuildRootPath$/external/glslang -i $BuildRootPath$/external/glslang/build_info.h.tmpl -o %2'
		.ExecOutput + '/glslang/build_info.h'
	]

	.GlslangGlslangUnity = 
	[
		.UnityInputPath = {
			'$BuildRootPath$/external/glslang/glslang/GenericCodeGen',
			'$BuildRootPath$/external/glslang/glslang/MachineIndependent',
			'$BuildRootPath$/external/glslang/glslang/OGLCompilersDLL',
		}
		.UnityInputPattern = "*.cpp"
		.UnityInputExcludedFiles = {
			'$BuildRootPath$/external/glslang/glslang/MachineIndependent/glslang_tab.cpp'
			'$BuildRootPath$/external/glslang/glslang/MachineIndependent/glslang_angle_tab.cpp'
		}
		.UnityOutputPath = '$IntermediateFilePath$/external/glslang/glslang'
		.UnityOutputPattern = 'glslang-glslang-unity*.cpp'
	]
	.GlslangGlslangObjectList =
	[
		Using(.ObjectListCommon)
		Using(.GlslangGlslangUnity)

		.Name = 'glslang-glslang'
		.DependencyTasks = { .GlslangGenerateTask }
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$BuildRootPath$/external/glslang'
				+ ' -I$BuildRootPath$/external/glslang/OGLCompilersDLL'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=1'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
		.ConfigDependentCompilerOptions = {
			' -I$IntermediateFilePath$/glslang-generate',
		}
		.CompilerInputUnity = '$Name$-unity'
		.CompilerInputPath = {
			'$BuildRootPath$/external/glslang/glslang/HLSL',
			'$BuildRootPath$/external/glslang/glslang/OSDependent',
		}
		.CompilerInputFiles = {
			'$BuildRootPath$/external/glslang/glslang/MachineIndependent/glslang_tab.cpp'
		}
	#if !__WINDOWS__
	 	.CompilerInputExcludePath = '$BuildRootPath$/external/glslang/glslang/OSDependent/Windows'
	#else
	 	.CompilerInputExcludePath = '$BuildRootPath$/external/glslang/glslang/OSDependent/Unix'
	#endif
	]

	.GlslangHlslUnity = 
	[
		.UnityInputPath = '$BuildRootPath$/external/glslang/hlsl'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/external/glslang/hlsl'
		.UnityOutputPattern = 'glslang-hlsl-unity*.cpp'
	]
	.GlslangHlslObjectList =
	[
		Using(.ObjectListCommon)
		Using(.GlslangHlslUnity)

		.Name = 'glslang-hlsl'
		.DependencyTasks = { .GlslangGenerateTask }
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$BuildRootPath$/external/glslang'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=1'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
		.ConfigDependentCompilerOptions = {
			' -I$IntermediateFilePath$/glslang-generate',
		}
		.CompilerInputUnity = '$Name$-unity'
	]

	.GlslangSPIRVUnity = 
	[
		.UnityInputPath = '$BuildRootPath$/external/glslang/SPIRV'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/external/glslang/SPIRV'
		.UnityOutputPattern = 'glslang-SPIRV-unity*.cpp'
	]
	.GlslangSPIRVObjectList =
	[
		Using(.ObjectListCommon)
		Using(.GlslangSPIRVUnity)
		
		.Name = 'glslang-SPIRV'
		.DependencyTasks = { .GlslangGenerateTask }
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$BuildRootPath$/external/glslang'
				+ ' -I$BuildRootPath$/external/spirv-tools/include'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=1'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
				+ ' -D_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING'
		.ConfigDependentCompilerOptions = {
			' -I$IntermediateFilePath$/glslang-generate',
		}
		.CompilerInputUnity = '$Name$-unity'
	]

	.SPIRVToolsUnity = 
	[
		.UnityInputPath = '$BuildRootPath$/external/spirv-tools/source'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/external/spirv-tools/source'
		.UnityOutputPattern = 'SPIRV-tools-unity*.cpp'
		.UnityInputExcludePath = { '$BuildRootPath$/external/spirv-tools/source/fuzz' }
		.UnityInputExcludedFiles = {
			'$BuildRootPath$/external/spirv-tools/source/operand.cpp',
			'$BuildRootPath$/external/spirv-tools/source/spirv_reducer_options.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/amd_ext_to_khr.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/basic_block.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/copy_prop_arrays.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/folding_rules.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/instruction.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/ir_context.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/loop_unswitch_pass.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/local_access_chain_convert_pass.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/local_single_block_elim_pass.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/mem_pass.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/pass.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/scalar_replacement_pass.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/ssa_rewrite_pass.cpp',
			'$BuildRootPath$/external/spirv-tools/source/opt/vector_dce.cpp',
			'$BuildRootPath$/external/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity.cpp',
			'$BuildRootPath$/external/spirv-tools/source/reduce/structured_loop_to_selection_reduction_opportunity_finder.cpp',
		}
	]
	.SPIRVToolsObjectList =
	[
		Using(.ObjectListCommon)
		Using(.SPIRVToolsUnity)
		
		.Name = 'SPIRV-tools'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$BuildRootPath$/external/spirv-headers/include'
				+ ' -I$BuildRootPath$/external/spirv-tools'
				+ ' -I$BuildRootPath$/external/spirv-tools/include'
				+ ' -I$BuildRootPath$/external/spirv-tools-generated' // todo: - add code generation step
				+ ' -D_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING'
		.CompilerInputUnity = '$Name$-unity'
		.CompilerInputFiles = .UnityInputExcludedFiles
	]

	.SlangGlslangUnity = 
	[
		.UnityInputPath = '$BuildRootPath$/source/slang-glslang'
		.UnityInputPattern = "*.cpp"
		.UnityOutputPath = '$IntermediateFilePath$/source/slang-glslang'
		.UnityOutputPattern = 'slang-glslang-unity*.cpp'
	]
	.SlangGlslangObjectList =
	[
		Using(.ObjectListCommon)
		Using(.SlangGlslangUnity)

		.Name = 'slang-glslang'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
				+ ' -I$BuildRootPath$/external/glslang'
				+ ' -I$BuildRootPath$/external/spirv-tools/include'
				+ ' -DENABLE_HLSL'
				+ ' -DENABLE_OPT=1'
				+ ' -DAMD_EXTENSIONS'
				+ ' -DNV_EXTENSIONS'
		.CompilerInputUnity = '$Name$-unity'
	]

	.HelloWorldObjectList =
	[
		Using(.ObjectListCommon)

		.Name = 'hello-world'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$BuildRootPath$'
			+ ' -I$BuildRootPath$/source'
			+ ' -I$BuildRootPath$/tools'
		.CompilerInputPath = '$BuildRootPath$/examples/hello-world'
	]

	.ModelViewerObjectList =
	[
		Using(.ObjectListCommon)

		.Name = 'model-viewer'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$BuildRootPath$'
			+ ' -I$BuildRootPath$/source'
			+ ' -I$BuildRootPath$/tools'
			+ ' -I$BuildRootPath$/external/imgui'
		.CompilerInputPath = '$BuildRootPath$/examples/model-viewer'
	]

	// .VolcanoUnity = 
	// [
	// 	.UnityInputPath = '$BuildRootPath$/examples/volcano'
	// 	.UnityInputPattern = "*.cpp"
	// 	.UnityInputExcludedFiles = {
	// 	}
	// 	.UnityOutputPath = '$IntermediateFilePath$/examples/volcano'
	// 	.UnityOutputPattern = 'volcano-unity*.cpp'
	// ]
	.VolcanoObjectList =
	[
		Using(.ObjectListCommon)
		//Using(.VolcanoUnity)
		
		.Name = 'volcano'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$BuildRootPath$'
			+ ' -I$BuildRootPath$/source'
			+ ' -I$BuildRootPath$/external/glm'
			+ ' -I$BuildRootPath$/external/xxhash'
			+ ' -I$BuildRootPath$/external/stb'
			+ ' -I$BuildRootPath$/external/tinyobjloader'
			+ ' -I$BuildRootPath$/external/glfw/include'
			+ ' -I$BuildRootPath$/external/VulkanMemoryAllocator/src'
			+ ' -I$BuildRootPath$/external/imgui'
			+ ' -I$BuildRootPath$/external/imnodes'
			+ ' -I$BuildRootPath$/external/cereal/include'
			+ ' -I$BuildRootPath$/external/picosha2'
			+ ' -I$BuildRootPath$/external/SHA-Intrinsics'
			+ ' -I$BuildRootPath$/external/mio/include'
			+ ' -I$BuildRootPath$/external/nativefiledialog/src/include'
			+ ' -I$BuildRootPath$/external/tracy/nfd'
			+ ' -I$BuildRootPath$/external/tracy'
			+ ' -I$VulkanSDKPath$/include'
			+ ' -Wno-unused-function'
		// .CompilerInputUnity = 'volcano-unity'
		.CompilerInputPath = '$BuildRootPath$/examples/volcano'
	]

	.MioTestObjectList =
	[
		Using(.ObjectListCommon)

		.Name = 'mio'
		.ObjectListCompilerOptions = .CompilerOptionsCpp
			+ ' -I$BuildRootPath$/external/mio/include'
		.CompilerInputFiles = {
			'$BuildRootPath$/external/mio/test/test.cpp',
		}
	]

	.GlfwUnity = 
	[
		.UnityInputPath = '$BuildRootPath$/source/glfw'
		.UnityInputFiles = {
			'$BuildRootPath$/external/glfw/src/context.c',
			'$BuildRootPath$/external/glfw/src/init.c',
			'$BuildRootPath$/external/glfw/src/input.c',
			'$BuildRootPath$/external/glfw/src/monitor.c',
			'$BuildRootPath$/external/glfw/src/vulkan.c',
			'$BuildRootPath$/external/glfw/src/window.c',
			'$BuildRootPath$/external/glfw/src/egl_context.c',
			'$BuildRootPath$/external/glfw/src/osmesa_context.c',
		}
	#if __WINDOWS__
		.UnityInputFiles + {
			'$BuildRootPath$/external/glfw/src/win32_init.c',
			'$BuildRootPath$/external/glfw/src/win32_joystick.c',
			'$BuildRootPath$/external/glfw/src/win32_monitor.c',
			'$BuildRootPath$/external/glfw/src/win32_time.c',
			'$BuildRootPath$/external/glfw/src/win32_thread.c',
			'$BuildRootPath$/external/glfw/src/win32_window.c',
			'$BuildRootPath$/external/glfw/src/wgl_context.c',
		}
	#endif
	#if __OSX__
		.UnityInputFiles + {
			'$BuildRootPath$/external/glfw/src/cocoa_time.c',
			'$BuildRootPath$/external/glfw/src/posix_thread.c',
		}
	#endif //__OSX__
	#if __LINUX__
		.UnityInputFiles + {
		    '$BuildRootPath$/external/glfw/src/x11_init.c',
			'$BuildRootPath$/external/glfw/src/x11_monitor.c',
			'$BuildRootPath$/external/glfw/src/x11_window.c',
            '$BuildRootPath$/external/glfw/src/xkb_unicode.c',
			'$BuildRootPath$/external/glfw/src/posix_time.c',
			'$BuildRootPath$/external/glfw/src/posix_thread.c',
			'$BuildRootPath$/external/glfw/src/glx_context.c',
		}
	#endif //__LINUX__
		.UnityOutputPath = '$IntermediateFilePath$/external/glfw'
		.UnityOutputPattern = 'glfw-unity*.c'
	]
	.GlfwLibrary =
	[
		Using(.LibraryCommon)
		Using(.GlfwUnity)

		.Name = 'glfw'
		.LibraryCompilerOptions = .CompilerOptionsC
	#if __WINDOWS__
			+ ' -D_GLFW_WIN32=1'
	#endif
	#if __OSX__
			+ ' -D_GLFW_COCOA=1'
	#endif //__OSX__
	#if __LINUX__
			+ ' -D_GLFW_X11=1'
	#endif //__LINUX__
		.CompilerInputUnity = '$Name$-unity'
	#if __OSX__
		.CompilerInputFiles = {
			'$BuildRootPath$/external/glfw/src/cocoa_init.m',
			'$BuildRootPath$/external/glfw/src/cocoa_joystick.m',
            '$BuildRootPath$/external/glfw/src/cocoa_monitor.m',
			'$BuildRootPath$/external/glfw/src/cocoa_window.m',
			'$BuildRootPath$/external/glfw/src/nsgl_context.m',
		}
	#endif //__OSX__
	]

	.ZStdLibrary = 
	[
		Using(.LibraryCommon)

		.Name = 'zstd'
		.LibraryCompilerOptions = .CompilerOptionsC
			+ ' -I$BuildRootPath$/external/zstd/lib'
			+ ' -I$BuildRootPath$/external/zstd/lib/common'
			+ ' -Wno-unused-function'
		.CompilerInputPath = '$BuildRootPath$/external/zstd/lib'
		.CompilerInputExcludedFiles = {
			'common/xxhash.c'
		}
		.CompilerInputPattern = '*.c'
	]

	.XXHashLibrary = 
	[
		Using(.LibraryCommon)

		.Name = 'xxhash'
		.LibraryCompilerOptions = .CompilerOptionsC
		.CompilerInputFiles = {
			'$BuildRootPath$/external/xxhash/xxhash.c',
		}
	]

	.SHAIntrinsicsLibrary = 
	[
		Using(.LibraryCommon)

		.Name = 'sha-instrinsics'
		.LibraryCompilerOptions = .CompilerOptionsC
		.CompilerInputFiles = {
			'$BuildRootPath$/external/SHA-Intrinsics/sha1-x86.c',
			'$BuildRootPath$/external/SHA-Intrinsics/sha256.c',
			'$BuildRootPath$/external/SHA-Intrinsics/sha256-x86.c',
			'$BuildRootPath$/external/SHA-Intrinsics/sha512.c',
		}
	]

	.Freetype2Unity = 
	[
		.UnityInputFiles = {
			'$BuildRootPath$/external/freetype2/src/autofit/autofit.c',
			'$BuildRootPath$/external/freetype2/src/base/ftbase.c',
			'$BuildRootPath$/external/freetype2/src/base/ftbbox.c',
			'$BuildRootPath$/external/freetype2/src/base/ftbdf.c',
			'$BuildRootPath$/external/freetype2/src/base/ftbitmap.c',
			'$BuildRootPath$/external/freetype2/src/base/ftcid.c',
			'$BuildRootPath$/external/freetype2/src/base/ftfstype.c',
			'$BuildRootPath$/external/freetype2/src/base/ftgasp.c',
			'$BuildRootPath$/external/freetype2/src/base/ftglyph.c',
			'$BuildRootPath$/external/freetype2/src/base/ftgxval.c',
			'$BuildRootPath$/external/freetype2/src/base/ftinit.c',
			'$BuildRootPath$/external/freetype2/src/base/ftmm.c',
			'$BuildRootPath$/external/freetype2/src/base/ftotval.c',
			'$BuildRootPath$/external/freetype2/src/base/ftpatent.c',
			'$BuildRootPath$/external/freetype2/src/base/ftpfr.c',
			'$BuildRootPath$/external/freetype2/src/base/ftstroke.c',
			'$BuildRootPath$/external/freetype2/src/base/ftsynth.c',
			'$BuildRootPath$/external/freetype2/src/base/ftsystem.c',
			'$BuildRootPath$/external/freetype2/src/base/fttype1.c',
			'$BuildRootPath$/external/freetype2/src/base/ftwinfnt.c',
			'$BuildRootPath$/external/freetype2/src/bdf/bdf.c',
			'$BuildRootPath$/external/freetype2/src/cache/ftcache.c',
			'$BuildRootPath$/external/freetype2/src/cff/cff.c',
			'$BuildRootPath$/external/freetype2/src/cid/type1cid.c',
			'$BuildRootPath$/external/freetype2/src/gzip/ftgzip.c',
			'$BuildRootPath$/external/freetype2/src/lzw/ftlzw.c',
			'$BuildRootPath$/external/freetype2/src/pcf/pcf.c',
			'$BuildRootPath$/external/freetype2/src/pfr/pfr.c',
			'$BuildRootPath$/external/freetype2/src/psaux/psaux.c',
			'$BuildRootPath$/external/freetype2/src/pshinter/pshinter.c',
			'$BuildRootPath$/external/freetype2/src/psnames/psmodule.c',
			'$BuildRootPath$/external/freetype2/src/raster/raster.c',
			'$BuildRootPath$/external/freetype2/src/sfnt/sfnt.c',
			'$BuildRootPath$/external/freetype2/src/smooth/smooth.c',
			'$BuildRootPath$/external/freetype2/src/truetype/truetype.c',
			'$BuildRootPath$/external/freetype2/src/type1/type1.c',
			'$BuildRootPath$/external/freetype2/src/type42/type42.c',
			'$BuildRootPath$/external/freetype2/src/winfonts/winfnt.c',
		}

	#if __WINDOWS__
		.UnityInputFiles + {
			'$BuildRootPath$/external/freetype2/builds/windows/ftdebug.c',
		}
	#else
		.UnityInputFiles + {
			'$BuildRootPath$/external/freetype2/src/base/ftdebug.c',
		}
	#endif

		.UnityOutputPath = '$IntermediateFilePath$/external/freetype2'
		.UnityOutputPattern = 'freetype2-unity*.c'
	]
	.Freetype2Library = 
	[
		Using(.LibraryCommon)
		Using(.Freetype2Unity)

		.Name = 'freetype2'
		.LibraryCompilerOptions = .CompilerOptionsC
			+ ' -I$BuildRootPath$/external/freetype2/include'
			+ ' -DFT2_BUILD_LIBRARY'
		.CompilerInputUnity = '$Name$-unity'
	]

	.ImguiUnity = 
	[
		.UnityInputFiles = {
			'$BuildRootPath$/external/imgui/imgui.cpp'
			'$BuildRootPath$/external/imgui/imgui_demo.cpp'
			'$BuildRootPath$/external/imgui/imgui_draw.cpp'
			'$BuildRootPath$/external/imgui/imgui_widgets.cpp'
			'$BuildRootPath$/external/imgui/misc/cpp/imgui_stdlib.cpp'
			'$BuildRootPath$/external/imgui/misc/freetype/imgui_freetype.cpp'
			'$BuildRootPath$/external/imnodes/imnodes.cpp'
		}

		.UnityOutputPath = '$IntermediateFilePath$/external/imgui'
		.UnityOutputPattern = 'imgui-unity*.cpp'
	]
	.ImguiLibrary = 
	[
		Using(.LibraryCommon)
		Using(.ImguiUnity)

		.Name = 'imgui'
		.DependencyTasks = { .Gl3wGenerateTask }
		.LibraryCompilerOptions = .CompilerOptionsCpp
			+ ' -I$BuildRootPath$/external/imgui'
			+ ' -I$BuildRootPath$/external/imnodes'
			+ ' -I$BuildRootPath$/external/glfw/include'
			+ ' -I$BuildRootPath$/external/freetype2/include'
			+ ' -I$VulkanSDKPath$/include'
		.ConfigDependentCompilerOptions = {
			' -I$IntermediateFilePath$/gl3w-generate',
		}
		.CompilerInputUnity = '$Name$-unity'
		.CompilerInputFiles = {
			'$BuildRootPath$/external/imgui/examples/imgui_impl_opengl3.cpp',
			'$BuildRootPath$/external/imgui/examples/imgui_impl_glfw.cpp',
			'$BuildRootPath$/external/imgui/examples/imgui_impl_vulkan.cpp'
		}
	]

	.NFDLibrary = 
	[
		Using(.LibraryCommon)

		.Name = 'nativefiledialog'
		.LibraryCompilerOptions = ' -I$BuildRootPath$/external/nativefiledialog/src/include'
	#if __WINDOWS__
		.CompilerInputFiles = {
			'$BuildRootPath$/external/nativefiledialog/src/nfd_common.c',
			'$BuildRootPath$/external/nativefiledialog/src/nfd_win.cpp',
		}
	#endif
	#if __OSX__
		.LibraryCompilerOptions + .CompilerOptionsC
		.CompilerInputFiles = {
			'$BuildRootPath$/external/nativefiledialog/src/nfd_common.c',
			'$BuildRootPath$/external/nativefiledialog/src/nfd_cocoa.m',
		}
	#endif
	#if __LINUX__
		.LibraryCompilerOptions + .CompilerOptionsC
		.CompilerInputFiles = {
			'$BuildRootPath$/external/nativefiledialog/src/nfd_common.c',
			'$BuildRootPath$/external/nativefiledialog/src/nfd_gtk.c',
		}
	#endif
	]

	.CapstoneLibrary = 
	[
		Using(.LibraryCommon)

		.Name = 'capstone'
		.LibraryCompilerOptions = .CompilerOptionsC
			+ ' -I$BuildRootPath$/external/capstone/include'
		.CompilerInputPathRecurse = false
		.CompilerInputPath = {
			'$BuildRootPath$/external/capstone'
			'$BuildRootPath$/external/capstone/arch'
		}
		.CompilerInputPattern = '*.c'
	]

	.SlangDLL = 
	[
		Using(.DllCommon)

		.Name = 'slang'
		.DependencyObjectLists = {
			.CoreObjectList,
			.SlangObjectList,
		}
		.DLLLinkerOptions = .LinkerOptionsCpp 
			+ ' -shared'
	#if __WINDOWS__
		.DependencyObjectLists + .GfxObjectList
		.DLLLinkerOptions + ' -lshell32'
			+ ' -lgdi32'
			+ ' -ladvapi32'
		.LinkerType = 'msvc'
	#endif //__WINDOWS__
	]

	.SlangGlslangDLL =
	[
		Using(.DllCommon)

		.Name = 'slang-glslang'
		.DependencyObjectLists = {
			.SlangGlslangObjectList,
			.GlslangGlslangObjectList,
			.GlslangHlslObjectList,
			.GlslangOGLCompilersDLLObjectList,
			.GlslangSPIRVObjectList,
			.SPIRVToolsObjectList,
		}
		.DLLLinkerOptions = .LinkerOptionsCpp
			+ ' -shared'
	#if __WINDOWS__
		.DLLLinkerOptions + ' -ladvapi32'
			+ ' -lshell32'
			+ ' -lopengl32'
			+ ' -lglu32'
		.LinkerType = 'msvc'
	#endif //__WINDOWS__
	]

	.SlangCExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'slangc'
		.DependencyObjectLists = {
			.SlangCObjectList,
		}
		.DependencyDLLs = {
			.SlangDLL,
			.SlangGlslangDLL,
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
	]

	.TracyExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'tracy'
		.DependencyObjectLists = {
			.TracyObjectList,
		}
		.DependencyLibraries = {
			.XXHashLibrary,
			.ZStdLibrary,
			.Gl3wLibrary,
			.GlfwLibrary,
			.ImguiLibrary,
			.Freetype2Library,
			.NFDLibrary,
			.CapstoneLibrary,
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -L$VulkanSDKPath$/lib'
	#if __WINDOWS__
			+ ' -ladvapi32'
			+ ' -lgdi32'
			+ ' -lshell32'
			+ ' -lole32'
			+ ' -lws2_32'
			+ ' -lvulkan-1'
			+ ' -lopengl32'
			+ ' -lglu32'
	#endif //__WINDOWS__
	#if __OSX__
		 	+ ' -lvulkan'
			+ ' -framework Cocoa'
			+ ' -framework IOKit'
			+ ' -framework CoreVideo'
		//	+ ' -rpath @executable_path/bin/osx-x64/'
	#endif
	]

#if __WINDOWS__
	.HelloWorldExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'hello-world'
		.DependencyObjectLists = {
			.HelloWorldObjectList,
		}
		.DependencyDLLs = {
			.SlangDLL,
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
		.ExecutableLinkerOptions + ' -lgdi32'
	]

	.ModelViewerExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'model-viewer'
		.DependencyObjectLists = {
			.ModelViewerObjectList,
		}
		.DependencyLibraries = {
			.Gl3wLibrary,
			.GlfwLibrary,
			.ImguiLibrary,
			.Freetype2Library,
		}
		.DependencyDLLs = {
			.SlangDLL,
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -L$VulkanSDKPath$/lib'
		.ExecutableLinkerOptions + ' -ladvapi32'
			+ ' -lgdi32'
			+ ' -lshell32'
			+ ' -lvulkan-1'
	]
#endif

	.VolcanoExecutable = 
	[
		Using(.ExecutableCommon)

		.Name = 'volcano'
		.DependencyObjectLists = {
			.TracyClientObjectList,
			.VolcanoObjectList,
		}
		.DependencyLibraries = {
			.Gl3wLibrary,
			.GlfwLibrary,
			.XXHashLibrary,
			.SHAIntrinsicsLibrary,
			.ImguiLibrary,
			.Freetype2Library,
			.NFDLibrary,
		}
		.DependencyDLLs = {
			.SlangDLL,
			.SlangGlslangDLL,
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
			+ ' -L$VulkanSDKPath$/lib'
	#if __WINDOWS__
		.ExecutableLinkerOptions + ' -ladvapi32'
			+ ' -lgdi32'
			+ ' -lshell32'
			+ ' -lvulkan-1'
			+ ' -lole32'
	#endif //__WINDOWS__
	#if __OSX__
		.ExecutableLinkerOptions + ' -lvulkan'
			+ ' -framework Cocoa'
			+ ' -framework IOKit'
			+ ' -framework CoreVideo'
		//	+ ' -rpath @executable_path/bin/osx-x64/'
	#endif
	]

	.MioTestExecutable =
	[
		Using(.ExecutableCommon)

		.Name = 'mio'
		.DependencyObjectLists = {
			.MioTestObjectList,
		}
		.ExecutableLinkerOptions = .LinkerOptionsCpp
	]
	
	.MioTest =
	[
		Using(.TestCommon)

		.Name = 'mio'
		.DependencyExecutables = {
			.MioTestExecutable,
		}
		.TestOutput = '/mio-test'
	]

	{
		Using(.GlobalContext)
		
		ForEach(.CompilerConfig in .Clang_x64_Configs)
		{
			.LocalContext = []

			Using(.LocalContext)
			Using(.CompilerConfig)
			
			AddDLL(.SlangDLL .CompilerConfig)
			AddDLL(.SlangGlslangDLL .CompilerConfig)
			AddExecutable(.SlangCExecutable .CompilerConfig)
			AddExecutable(.TracyExecutable .CompilerConfig)
		#if __WINDOWS__
			AddExecutable(.HelloWorldExecutable .CompilerConfig)
			AddExecutable(.ModelViewerExecutable .CompilerConfig)
		#endif
			AddExecutable(.VolcanoExecutable .CompilerConfig)
			AddTest(.MioTest .CompilerConfig)

			Alias('$ConfigName$') {}

			^GlobalContext + .LocalContext
		}

		Alias('all') {}
	}
}

// .Clang_x64_ProjectConfig =
// [
// 	Using(.CompilerConfig)

// 	.Platform = .ArchInfo
// 	.Config = .ConfigName
// ]
// ^AllProjectConfigs + .Clang_x64_ProjectConfig;

// .Clang_x64_SolutionConfig = 
// [
// 	Using(.CompilerConfig)
	
// 	.Platform = .ArchInfo
// 	.Config = .ConfigName
// ]
// ^AllSolutionConfigs + .Clang_x64_SolutionConfig
//}

// // Projects
// ForEach(.RootProject in .RootProjects)
// {
// 	.LocalProjects = { }
// 	.LocalSolutionDependencies = { }
// 	.LocalSolutionFolders = { }

// 	{
// 		.Project = 
// 		[
// 			Using(.RootProject)

// 			.ProjectName = '$Name$-$ProjectType$'
// 			.ProjectOutput = '$BuildRootPath$/$ProjectName$.vcxproj'
// 			.ProjectInputFiles = .CompilerInputFiles + .CompilerInputUnity
// 			.Output = '$BuildOutputPath$/^$(Configuration)/$OutputFilePrefix$$Name$$OutputFilePrefix$'
// 			.ProjectConfigs = .AllProjectConfigs
// 		]
// 		^LocalProjects + .Project

// 		.SolutionDependency = 
// 		[
// 			Using(.Project)

// 			.Projects = { .ProjectName }
// 		]
// 		^LocalSolutionDependencies + .SolutionDependency

// 		.SolutionFolder = 
// 		[
// 			Using(.Project)

// 			.Path = '$Name$'
// 			.Projects = { .ProjectName }
// 		]
// 		^LocalSolutionFolders + .SolutionFolder
// 	}

// 	^AllProjects + .LocalProjects
// 	^AllSolutionDependencies + .LocalSolutionDependencies
// 	^AllSolutionFolders + .LocalSolutionFolders
// }

// {
// 	// "Build all" project
// 	{
// 		.Project =
// 		[
// 			Using(.ProjectCommon)
			
// 			.ProjectName = 'all-vcxproj'
// 			.ProjectFiles = { '$BuildRootPath$/fbuild.bff' }
// 			.ProjectOutput = '$BuildRootPath$/$ProjectName$.vcxproj'
// 			.ProjectConfigs = .AllProjectConfigs
// 			.ProjectBuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache ^$(Configuration)'
// 			.ProjectRebuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache -clean ^$(Configuration)'
// 			.ProjectCleanCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide clean-all-^$(Configuration)'
// 		]
// 		^AllProjects + .Project
// 	}

// 	// "Build none" project
// 	{
// 		.Project =
// 		[
// 			Using(.ProjectCommon)
			
// 			.ProjectName = 'none-vcxproj'
// 			.ProjectFiles = { '$BuildRootPath$/fbuild.bff' }
// 			.ProjectOutput = '$BuildRootPath$/$ProjectName$.vcxproj'
// 			.ProjectConfigs = .AllProjectConfigs
// 		]
// 		^AllProjects + .Project
// 		{
// 			Using(.Project)
// 			^AllProjectNames + .ProjectName
// 		}
// 	}

// 	{
// 		.Solution = 
// 		[
// 			.SolutionName = '$BuildName$'
// 			.SolutionOutput = '$BuildRootPath$/$BuildName$.sln'
// 			.SolutionProjects = .AllProjectNames
// 			.SolutionConfigs = .AllSolutionConfigs
// 			.SolutionFolders = .AllSolutionFolders
// 			.SolutionDependencies = .AllSolutionDependencies
// 			//.SolutionVisualStudioVersion        // (optional) Version of Solution (default "14.0.22823.1" VS2015 RC)
// 			//.SolutionMinimumVisualStudioVersion // (optional) Min version of Solution (default "10.0.40219.1" VS2010 Express)
// 			.SolutionBuildProject = 'all-vcxproj'
// 			//.SolutionDeployProjects             // (optional) Project(s) set deploy
// 		]
// 		^AllSolutions + .Solution
// 	}
// }
