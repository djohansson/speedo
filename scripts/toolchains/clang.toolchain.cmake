cmake_minimum_required(VERSION 3.29.1)

include_guard()

# todo: import LLVMConfig.cmake
set(LLVM_PATH $ENV{LLVM_PATH} CACHE PATH "LLVM root path")
set(LLVM_TOOLS_PATH $ENV{LLVM_TOOLS_PATH} CACHE PATH "LLVM tools path")
set(LLVM_VERSION_MAJOR $ENV{LLVM_VERSION_MAJOR} CACHE PATH "LLVM major version")

# todo: cross-compiling support. this is currently not used.
set(TARGET_ARCHITECTURE $ENV{TARGET_ARCHITECTURE} CACHE PATH "Target architecture")
#

if(NOT (DEFINED ${CMAKE_CROSSCOMPILING} AND ${CMAKE_CROSSCOMPILING}))
	if (NOT DEFINED ${CMAKE_SYSTEM_PROCESSOR})
		set(CMAKE_SYSTEM_PROCESSOR ${CMAKE_HOST_SYSTEM_PROCESSOR})
	endif()
	if (NOT DEFINED ${CMAKE_SYSTEM_NAME})
		set(CMAKE_SYSTEM_NAME ${CMAKE_HOST_SYSTEM_NAME})
	endif()
	if (NOT DEFINED ${CMAKE_SYSTEM_VERSION})
		set(CMAKE_SYSTEM_VERSION ${CMAKE_HOST_SYSTEM_VERSION})
	endif()
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
	set(CMAKE_EXECUTABLE_SUFFIX ".exe")
	set(CMAKE_C_SIMULATE_ID "MSVC")
	set(CMAKE_CXX_SIMULATE_ID "MSVC")
else()
	set(CMAKE_EXECUTABLE_SUFFIX "")
endif()

# set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES "CMAKE_SYSTEM_PROCESSOR;CMAKE_SYSTEM_NAME;CMAKE_SYSTEM_VERSION")

# UUID to enable CMake's `import std` handling
# it may potentially change with CMake versions
# set(CMAKE_EXPERIMENTAL_CXX_IMPORT_STD "0e5b6991-d74f-4b3d-a41c-cf096e0b2508") 
# set(CMAKE_CXX_MODULE_STD 1) # this is important

set(CMAKE_AR ${LLVM_TOOLS_PATH}/llvm-ar${CMAKE_EXECUTABLE_SUFFIX})

set(CMAKE_C_COMPILER ${LLVM_TOOLS_PATH}/clang${CMAKE_EXECUTABLE_SUFFIX})
set(CMAKE_C_COMPILER_ID "Clang")
set(CMAKE_C_COMPILER_ID_RUN TRUE)
set(CMAKE_C_COMPILER_FRONTEND_VARIANT "GNU")
set(CMAKE_C_COMPILER_LINKER_ID LLD)
set(CMAKE_C_COMPILER_LINKER_FRONTEND_VARIANT "GNU")
#set(CMAKE_C_COMPILER_WORKS TRUE)

set(CMAKE_CXX_COMPILER ${LLVM_TOOLS_PATH}/clang++${CMAKE_EXECUTABLE_SUFFIX})
set(CMAKE_CXX_COMPILER_ID "Clang")
set(CMAKE_CXX_COMPILER_ID_RUN TRUE)
set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")
set(CMAKE_CXX_COMPILER_LINKER_ID LLD)
set(CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT "GNU")
#set(CMAKE_CXX_COMPILER_WORKS TRUE)

#set(CMAKE_LINKER ${LLVM_TOOLS_PATH}/lld${CMAKE_EXECUTABLE_SUFFIX})

set(CMAKE_LINKER_TYPE LLD)
set(CMAKE_C_USING_LINKER_LLD "-fuse-ld=lld")
set(CMAKE_C_USING_LINKER_MODE FLAG)
set(CMAKE_CXX_USING_LINKER_LLD "-fuse-ld=lld")
set(CMAKE_CXX_USING_LINKER_MODE FLAG)

set(CMAKE_RC_COMPILER ${LLVM_TOOLS_PATH}/llvm-rc${CMAKE_EXECUTABLE_SUFFIX})

set(CMAKE_C_STANDARD 23)
set(CMAKE_CXX_STANDARD 26)

set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_C_EXCEPTIONS OFF)
set(CMAKE_CXX_EXCEPTIONS OFF)

set(CMAKE_C_RTTI OFF)
set(CMAKE_CXX_RTTI OFF)

set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)

set(CMAKE_VERBOSE_MAKEFILE ON)

set(COMPILE_COMMON_FLAGS "")
set(LINK_COMMON_FLAGS "-nodefaultlibs")

if (CMAKE_SYSTEM_PROCESSOR MATCHES "arm.*|aarch64")
	set(COMPILE_COMMON_FLAGS "${COMPILE_COMMON_FLAGS} -march=native+crc+crypto")
else()
	set(COMPILE_COMMON_FLAGS "${COMPILE_COMMON_FLAGS} -march=native")
endif()

set(COMPILE_C_FLAGS "") #set(COMPILE_C_FLAGS "-nostdinc") # todo: use llvm libc headers
#set(COMPILE_C_FLAGS "${COMPILE_C_FLAGS} -nostdlib")
set(COMPILE_CXX_FLAGS "-nostdinc++ -nostdlib++ -isystem ${LLVM_PATH}/include/c++/v1")

set(LINK_COMMON_FLAGS "${LINK_COMMON_FLAGS} -L${LLVM_PATH}/lib -llibc++")
set(LINK_COMMON_FLAGS_DEBUG "")
set(LINK_COMMON_FLAGS_RELEASE "")

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
	set(COMPILE_COMMON_FLAGS "${COMPILE_COMMON_FLAGS} -Xclang -cfguard")
	set(LINK_COMMON_FLAGS "${LINK_COMMON_FLAGS} -lucrt")
else()
	if(CMAKE_SYSTEM_NAME MATCHES "Linux")
		set(COMPILE_C_FLAGS "${COMPILE_C_FLAGS} -D_GNU_SOURCE")
		set(LINK_COMMON_FLAGS "${LINK_COMMON_FLAGS} -Wl,--undefined-version")
	endif()
	set(LINK_COMMON_FLAGS "${LINK_COMMON_FLAGS} -Wl,-rpath,${LLVM_PATH}/lib -lc -lpthread -lc++abi")
endif()

set(CMAKE_C_FLAGS_INIT "${COMPILE_C_FLAGS} ${COMPILE_COMMON_FLAGS}")
set(CMAKE_C_FLAGS_DEBUG_INIT "-O0 -g -D_DEBUG -fno-omit-frame-pointer")
set(CMAKE_C_FLAGS_RELEASE_INIT "-O3 -g -DNDEBUG")
set(CMAKE_CXX_FLAGS_INIT "${COMPILE_CXX_FLAGS} ${COMPILE_COMMON_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG_INIT "-O0 -g -D_DEBUG -fno-omit-frame-pointer")
set(CMAKE_CXX_FLAGS_RELEASE_INIT "-O3 -g -DNDEBUG")
set(CMAKE_EXE_LINKER_FLAGS_INIT "${LINK_COMMON_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT "${LINK_COMMON_FLAGS_DEBUG}")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT "${LINK_COMMON_FLAGS_RELEASE}")
set(CMAKE_MODULE_LINKER_FLAGS_INIT "${LINK_COMMON_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS_DEBUG_INIT "${LINK_COMMON_FLAGS_DEBUG}")
set(CMAKE_MODULE_LINKER_FLAGS_RELEASE_INIT "${LINK_COMMON_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "${LINK_COMMON_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT "${LINK_COMMON_FLAGS_DEBUG}")
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE_INIT "${LINK_COMMON_FLAGS_RELEASE}")
