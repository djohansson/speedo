#once

#if exists(TARGET_ARCHITECTURE)
	#import TARGET_ARCHITECTURE
	.ArchitectureName = '$TARGET_ARCHITECTURE$'
#else
	Error('TARGET_ARCHITECTURE not set')
#endif

#if exists(PROCESSOR_ARCHITECTURE)
	#import PROCESSOR_ARCHITECTURE
	.ProcessorArchitecture = '$PROCESSOR_ARCHITECTURE$'
#else
	Error('PROCESSOR_ARCHITECTURE not set')
#endif

.Clang_BaseConfig =
[
#if exists(LLVM_PATH)
	#import LLVM_PATH
	.LLVMPath = '$LLVM_PATH$'
#else
	Error('LLVM_PATH not set')
#endif // exists(LLVM_PATH)
#if exists(LLVM_TOOLS_PATH)
	#import LLVM_TOOLS_PATH
	.LLVMToolsPath = '$LLVM_TOOLS_PATH$'
#else
	Error('LLVM_TOOLS_PATH not set')
#endif // exists(LLVM_TOOLS_PATH)
#if exists(LLVM_VERSION_MAJOR)
	#import LLVM_VERSION_MAJOR
	.LLVMVersionMajor = '$LLVM_VERSION_MAJOR$'
#else
	Error('LLVM_VERSION_MAJOR not set')
#endif // exists(LLVM_VERSION_MAJOR)
	.Executable = '$LLVMToolsPath$/clang$ExeSuffix$'
	.CompilerInfo = 'Clang'
    .Librarian = '$LLVMToolsPath$/llvm-ar$ExeSuffix$'
	.Linker = '$LLVMToolsPath$/clang$ExeSuffix$'
#if __WINDOWS__
	// on Windows, ugly workarounds for "folders with spaces" are never going out of style
	// note that we need to do this _after_ .Executable, .Librarian and .Linker have been set
	.LLVMPath = '"$LLVMPath$"'
	.LLVMToolsPath = '"$LLVMToolsPath$"'
	.PlatformInfo = 'windows'
#endif //__WINDOWS__
#if __OSX__
	.PlatformInfo = 'darwin'
#endif //__OSX__
#if __LINUX__
	.PlatformInfo = 'linux'
#endif //__LINUX__
	.Compiler = 'Compiler-Clang'
	.CompilerOptions = '-o "%2" "%1" -c -g -Wall'
		+ ' -isystem $LLVMPath$/include/c++/v1' // libc++ location. must come before compiler toolchain include path
		+ ' -isystem $LLVMToolsPath$/lib/clang/$LLVMVersionMajor$/include' // vcpkg llvm compiler toolchain include path
		+ .PlatformIncludePaths // platform specific include paths. should come after LLVM include paths
		+ ' -fno-ms-compatibility'
		+ ' -fno-rtti'
		+ ' -fno-exceptions'
#if __WINDOWS__
		+ ' -D__WINDOWS__'
		+ ' -D_WIN32'
		+ ' -D_WIN64'
		+ ' -DUNICODE'
		+ ' -D_UNICODE'
		+ ' -D_CRT_DECLARE_NONSTDC_NAMES'
		+ ' -D_CRT_SECURE_NO_WARNINGS'
		+ ' -D_CRT_STDIO_ISO_WIDE_SPECIFIERS'
		+ ' -D_LIBCXX_ABI_FORCE_MICROSOFT'
		// + ' -D_SILENCE_ALL_CXX20_DEPRECATION_WARNINGS'
		// + ' -DVC_EXTRALEAN'
		+ ' -DNOMINMAX'
		// + ' -D_WINSOCKAPI_' // stops windows.h including winsock.h
		+ ' -D_MT'
		+ ' -D_DLL'
		+ ' -Xclang -cfguard'
		+ ' -Xclang -gcodeview'
#endif //__WINDOWS__
#if __OSX__
		+ ' -D__APPLE__'
		+ ' -D__OSX__'
		+ ' -fpic'
		+ ' -fno-plt'
#endif //__OSX__
#if __LINUX__
		+ ' -D__LINUX__'
		+ ' -D__linux__'
		+ ' -fpic'
		+ ' -fno-plt'
#endif //__LINUX__
	.CompilerOptionsC = ' -std=c23'  // todo: use llvm libc headers
	.CompilerOptionsCpp = ' -std=c++26 -nostdlib -nostdinc++ -nostdlib++ -fexperimental-library'
	.LinkerOptions = '"%1" -o "%2" -g -fuse-ld=lld'
		+ ' -L$LLVMPath$/lib'
		+ ' -L$LLVMToolsPath$/lib/clang/$LLVMVersionMajor$/lib/$PlatformInfo$'
		+ .PlatformLibPaths
#if !__WINDOWS__
		// todo: deploy all runtime dependencies to the same folder as the executable
		+ ' -rpath $LLVMPath$/lib'
		+ ' -rpath $LLVMToolsPath$/lib/clang/$LLVMVersionMajor$/lib/$PlatformInfo$'
		// + ' -fvisibility=hidden'
		// + ' -fvisibility=inlines-hidden'
		// + ' -fvisibility=ms-compat'
		// + ' -Bsymbolic' // make sure to mark exports with __attribute__((visibility("protected")))
		// + ' -ffunction-sections'
		// + ' -fdata-sections'
		// + ' -z now'
		// + ' -z relro'
#endif
		+ ' -nodefaultlibs'

	.LibrarianOptions = 'rcs "%2" "%1"'
	.LibrarianType = 'ar'
	.ProfilingLevel = '0'
	.GraphicsValidationLevel = '0'
]

.Clang_Native_BaseConfig =
[
	Using(.Clang_BaseConfig)

	.CompilerOptions + ' -march=native'
	If (.ArchitectureName == 'arm64')
	{
		.CompilerOptions + '+crc+crypto'
	}
]

.Clang_Native_DebugConfig =
[
	Using(.Clang_Native_BaseConfig)

	.ConfigName = 'debug'
	.ProfilingLevel = '1'
	.GraphicsValidationLevel = '2'
	.CompilerOptions + ' -O0'
		+ ' -D_DEBUG'
		+ ' -D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG'
		+ ' -fno-omit-frame-pointer'
#if __WINDOWS__
		+ ' -Xclang --dependent-lib=msvcrtd'
#endif
#if __OSX__
		+ ' -fsanitize=undefined'
		+ ' -fsanitize=thread'
	//	+ ' -fsanitize=address' // not reliable together with mimalloc yet unfortunately
	//.LinkerOptions + ' -fsanitize=address'
	.LinkerOptions + ' -L$BuildRootPath$/build/toolchain/$SystemTriplet$/tools/llvm/lib/clang/$LLVMVersionMajor$/lib/darwin'
		+ ' -lclang_rt.ubsan_osx_dynamic'
		+ ' -lclang_rt.tsan_osx_dynamic'
	//	+ ' -lclang_rt.asan_osx_dynamic' // not reliable together with mimalloc yet unfortunately
#endif
#if __WINDOWS__
	.LinkerOptions + ' -Xclang --dependent-lib=msvcrtd -Xlinker /NODEFAULTLIB -Xlinker /GUARD:CF -lmsvcrtd -lucrtd -lmsvcprt -lvcruntime -llibc++ -lkernel32 -loldnames -liso_stdio_wide_specifiers'
#else
	.LinkerOptions + ' -lc -lpthread -lc++ -lc++abi'
#endif
]

.Clang_Native_ReleaseConfig =
[
	Using(.Clang_Native_BaseConfig)

	.ConfigName = 'release'
	.CompilerOptions + ' -O3'
	.CompilerOptions + ' -DNDEBUG'
		+ ' -D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE'
#if __WINDOWS__
		+ ' -Xclang --dependent-lib=msvcrt'
#endif
#if !__OSX__
		+ ' -flto=thin'
#endif
#if __WINDOWS__
	.LinkerOptions + ' -Xclang --dependent-lib=msvcrtd -Xlinker /NODEFAULTLIB -Xlinker /GUARD:CF -lmsvcrt -lucrt -lmsvcprt -lvcruntime -llibc++ -lkernel32 -loldnames -liso_stdio_wide_specifiers'
#else
	.LinkerOptions + ' -lc -lpthread -lc++ -lc++abi'
#endif
]

.Clang_Native_ProfileConfig =
[
	Using(.Clang_Native_ReleaseConfig)

	.ConfigName = 'profile'
	.ProfilingLevel = '1'
]

.Clang_Native_Configs = {
	.Clang_Native_DebugConfig, .Clang_Native_ProfileConfig, .Clang_Native_ReleaseConfig
}

Compiler('Compiler-Clang')
{
	Using(.Clang_BaseConfig)
}
