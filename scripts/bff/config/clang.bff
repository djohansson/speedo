#once

#if exists(TARGET_ARCHITECTURE)
	#import TARGET_ARCHITECTURE
	.ArchitectureName = '$TARGET_ARCHITECTURE$'
#else
	Error('TARGET_ARCHITECTURE not set')
#endif

#if exists(PROCESSOR_ARCHITECTURE)
	#import PROCESSOR_ARCHITECTURE
	.ProcessorArchitecture = '$PROCESSOR_ARCHITECTURE$'
#else
	Error('PROCESSOR_ARCHITECTURE not set')
#endif

.Clang_BaseConfig =
[
#if exists(LLVM_PATH)
	#import LLVM_PATH
	.LLVMPath = '$LLVM_PATH$'
#else
	Error('LLVM_PATH not set')
#endif // exists(LLVM_PATH)
#if exists(LLVM_TOOLS_PATH)
	#import LLVM_TOOLS_PATH
	.LLVMToolsPath = '$LLVM_TOOLS_PATH$'
#else
	Error('LLVM_TOOLS_PATH not set')
#endif // exists(LLVM_TOOLS_PATH)
#if exists(LLVM_VERSION_MAJOR)
	#import LLVM_VERSION_MAJOR
	.LLVMVersionMajor = '$LLVM_VERSION_MAJOR$'
#else
	Error('LLVM_VERSION_MAJOR not set')
#endif // exists(LLVM_VERSION_MAJOR)
	.Executable = '$LLVMToolsPath$/clang$ExeSuffix$'
	.CompilerInfo = 'Clang'
    .Librarian = '$LLVMToolsPath$/llvm-ar$ExeSuffix$'
	.Linker = '$LLVMToolsPath$/clang$ExeSuffix$'
#if __WINDOWS__
	// on Windows, ugly workarounds for "folders with spaces" are never going out of style
	// note that we need to do this _after_ .Executable, .Librarian and .Linker have been set
	.LLVMPath = '"$LLVMPath$"'
	.LLVMToolsPath = '"$LLVMToolsPath$"'
	.PlatformInfo = 'Windows'
#endif //__WINDOWS__
#if __OSX__
	.PlatformInfo = 'OSX'
#endif //__OSX__
#if __LINUX__
	.PlatformInfo = 'Linux'
#endif //__LINUX__
	.Compiler = 'Compiler-Clang'
	.CompilerOptions = '-o "%2" "%1" -c -g -Wall'
		+ ' -isystem $LLVMPath$/include/c++/v1' // libc++ location
#if __LINUX__ // linux specific clang bug workaround
		+ ' -isystem $LLVMPath$/lib/llvm-$LLVMVersionMajor$/include/$ProcessorArchitecture$-unknown-linux-gnu/c++/v1'
#endif
		+ ' -isystem $LLVMPath$/tools/llvm/lib/clang/$LLVMVersionMajor$/include'
		+ .PlatformIncludePaths // platform specific include paths. should come after LLVM include paths
		+ ' -fms-extensions'
		+ ' -fno-rtti'
		+ ' -fno-exceptions'
#if __WINDOWS__
		+ ' -D__WINDOWS__'
		+ ' -D_WIN32'
		+ ' -D_WIN64'
		+ ' -DUNICODE'
		+ ' -D_UNICODE'
		+ ' -D_CRT_SECURE_NO_WARNINGS'
		+ ' -DVC_EXTRALEAN'
		+ ' -DNOMINMAX'
		+ ' -D_WINSOCKAPI_' // stops windows.h including winsock.h
		+ ' -D_MT'
		+ ' -D_DLL'
		+ ' -Xclang -cfguard'
#endif //__WINDOWS__
#if __OSX__
		+ ' -D__APPLE__'
		+ ' -D__OSX__'
		+ ' -fpic'
		+ ' -fno-plt'
#endif //__OSX__
#if __LINUX__
		+ ' -D__LINUX__'
		+ ' -D__linux__'
		+ ' -fpic'
		+ ' -fno-plt'
#endif //__LINUX__
	.CompilerOptionsC = ' -std=c23 -nostdinc'
	.CompilerOptionsCpp = ' -std=c++26 -nostdinc++'
#if !__WINDOWS__
		+ ' -fexperimental-library'
#endif
	.LinkerOptions = '"%1" -o "%2" -g'
		+ ' -L $LLVMPath$/lib'
		+ ' -Wl,-rpath,$LLVMPath$/lib'
		+ .PlatformLibPaths
		+ ' -fuse-ld=lld'
#if !__WINDOWS__
		// + ' -fvisibility=hidden'
		+ ' -fvisibility=inlines-hidden'
		// + ' -fvisibility=ms-compat'
		+ ' -Bsymbolic' // make sure to mark exports with __attribute__((visibility("protected")))
		// + ' -ffunction-sections'
		// + ' -fdata-sections'
		// + ' -z now'
		// + ' -z relro'
	.DebugLinkerOptions = ''
	.ReleaseLinkerOptions = ''
#else
	.DebugLinkerOptions = ' -lmsvcrtd'
	.ReleaseLinkerOptions = ' -lmsvcrt'
#endif
	.LinkerOptionsC = ' -lc'
	.LinkerOptionsCpp = .LinkerOptionsC
		+ ' -lc++ -lc++abi -lc++experimental'
	.LibrarianOptions = 'rcs "%2" "%1"'
	.LibrarianType = 'ar'
	.ProfilingLevel = '0'
	.GraphicsValidationLevel = '0'
]

.Clang_Native_BaseConfig =
[
	Using(.Clang_BaseConfig)

	.CompilerOptions + ' -march=native'
	If (.ArchitectureName == 'arm64')
	{
		.CompilerOptions + '+crc+crypto'
	}
]

.Clang_Native_DebugConfig =
[
	Using(.Clang_Native_BaseConfig)

	.ConfigName = 'debug'
	.ProfilingLevel = '1'
	.GraphicsValidationLevel = '2'
	.CompilerOptions + ' -O0'
		+ ' -D_DEBUG'
		+ ' -fno-omit-frame-pointer'
#if __OSX__
		+ ' -fsanitize=undefined'
		+ ' -fsanitize=thread'
	//	+ ' -fsanitize=address' // not reliable together with mimalloc yet unfortunately
	//.LinkerOptions + ' -fsanitize=address'
	.LinkerOptions + ' -L$BuildRootPath$/build.output/toolchain/$SystemTriplet$/tools/llvm/lib/clang/$LLVMVersionMajor$/lib/darwin'
		+ ' -lclang_rt.ubsan_osx_dynamic'
		+ ' -lclang_rt.tsan_osx_dynamic'
	//	+ ' -lclang_rt.asan_osx_dynamic' // not reliable together with mimalloc yet unfortunately
#endif
]

.Clang_Native_ReleaseConfig =
[
	Using(.Clang_Native_BaseConfig)

	.ConfigName = 'release'
	.CompilerOptions + ' -O3'
	.CompilerOptions + ' -DNDEBUG'
#if !__OSX__
		+ ' -flto=thin'
#endif
]

.Clang_Native_ProfileConfig =
[
	Using(.Clang_Native_ReleaseConfig)

	.ConfigName = 'profile'
	.ProfilingLevel = '1'
]

.Clang_Native_Configs = {
	.Clang_Native_DebugConfig, .Clang_Native_ProfileConfig, .Clang_Native_ReleaseConfig
}

Compiler('Compiler-Clang')
{
	Using(.Clang_BaseConfig)
}
