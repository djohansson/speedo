#once

.BuildRootPath = '$_WORKING_DIR_$'
.IntermediateFilePath = '$BuildRootPath$/build/intermediate'
.BuildOutputPath = '$BuildRootPath$/build'

#include "config/platform.bff"
#include "config/clang.bff"
#include "config/powershell.bff"

.ProjectCommon = 
[
	.EmptyString = ''
	
	.ProjectType = 'vcxproj'
	.ProjectBuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache ^$(ProjectName)-^$(Configuration)'
	.ProjectRebuildCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide -dist -cache -clean ^$(ProjectName)-^$(Configuration)'
	.ProjectCleanCommand = 'cd ^$(SolutionDir) &amp; fbuild -ide Clean-^$(ProjectName)-^$(Configuration)'
	.ProjectBasePath  = '$BuildRootPath$'
	//.ProjectInputPathsExclude = // (optional) Paths to exclude from project
	//.ProjectFilesToExclude          // (optional) List of files to exclude from project
	//.ProjectPatternToExclude        // (optional) Pattern(s) for files to exclude from project
	//.ProjectAllowedFileExtensions   // (optional) Extensions to allow in path searches
	//.ProjectPatternToExclude // (optional) Pattern(s) for files to exclude from project
	//.ProjectAllowedFileExtensions // (optional) Extensions to allow in path searches

	.OutputDirectory = '$BuildOutputPath$'
	.IntermediateDirectory = '$IntermediateFilePath$'
	.Platform = 'x64'
	.PlatformToolset = 'llvm'
	.Dependencies = { 'none-vcxproj' }
	
	.PreBuildDependencies = { }
	.DependencyObjectLists = { }
	.DependencyLibraries = { }
	.DependencyDLLs = { }
	.DependencyExecutables = { }
	.DependencyTasks = { }
	.UnityInputPath = { }
	.UnityInputPattern = '*.cpp'
	.UnityInputFiles = { }
	.UnityInputExcludedFiles = { }
	.UnityOutputPath = '$IntermediateFilePath$'
	.CompilerInputPath = { }
	.CompilerInputPattern = '*.cpp'
	.CompilerInputFiles = { }
	.CompilerInputExcludedFiles = { }
	.OutputFilePrefix = ''
	.OutputFileSuffix = ''
]

.SolutionCommon = 
[
	.ProjectType = 'sln'
]

.ObjectListCommon = 
[
	Using(.ProjectCommon)

	.ProjectType = 'obj'
	.CompilerInputUnity = { }
	.ConfigDependentCompilerOptions = { }
	.ConfigDependentInputPaths = { }
]

.LibraryCommon = 
[
	Using(.ObjectListCommon)

	.ProjectType = 'lib'
	.OutputFilePrefix = .LibPrefix
	.OutputFileSuffix = .LibSuffix
]

.DllCommon = 
[
	Using(.ProjectCommon)

	.ProjectType = 'dll'
	.Libraries = { }
	.OutputFilePrefix = .DllPrefix
	.OutputFileSuffix = .DllSuffix
]

.ExecutableCommon = 
[
	Using(.ProjectCommon)

	.ProjectType = 'exe'
	.Libraries = { }
	.OutputFilePrefix = ''
	.OutputFileSuffix = .ExeSuffix
]

.TestCommon = 
[
	Using(.ProjectCommon)

	.ProjectType = 'test'
	.TestWorkingDir = ''
	.TestOutputName = ''
]

.TaskCommon = 
[
	Using(.ProjectCommon)
	
	.ProjectType = 'task'
	.ExecExecutable = ''
	.ExecWorkingDir = ''
	.UseConfigDependentWorkingDir = true
	.ExecOutputName = ''
	.ExecOutputPath = ''
	.UseConfigDependentOutputPath = true
	.DumpCompilerOptionsToFile = false
]

function PrintArray(.ArrayName .Array)
{
	ForEach(.Object in .Array)
	{
		Print('$ArrayName$:$Object$')
	}
}

function AddUnities(.UnityObject)
{
	Using(.UnityObject)

	^ReturnValues = { }
		
	ForEach (.Unity in .CompilerInputUnity)
	{
		If(.Unity not in .Unities)
		{
			//Print('AddUnities:$Unity$')
			Unity('$Unity$') {}
			^Unities + .Unity
		}

		^ReturnValues + '$Unity$'
	}
}

function AddObjectList(.ObjectList .CompilerConfig)
{
	.LocalObjectList = 
	[
		Using(.ObjectList)
		Using(.CompilerConfig)

		.ObjectListName = '$Name$-obj-$ConfigName$'

		ForEach(.Task in .DependencyTasks)
		{
			^ReturnValues = { }
			AddTask(.Task .CompilerConfig)
			^PreBuildDependencies + .ReturnValues
		}

		If(.CompilerInputPattern == '*.c')
		{
			^CompilerOptions + .CompilerOptionsC
		}
		If(.CompilerInputPattern != '*.c')
		{
			^CompilerOptions + .CompilerOptionsCpp
		}

		.CompilerOptions + ' -DSPEEDO_PROFILING_LEVEL=$ProfilingLevel$'
		.CompilerOptions + ' -DSPEEDO_GRAPHICS_VALIDATION_LEVEL=$GraphicsValidationLevel$'
		.CompilerOptions + .ObjectListCompilerOptions

		ForEach(.CompilerOption in .ConfigDependentCompilerOptions)
		{
			^CompilerOptions + '$CompilerOption$/$ConfigName$'
			^CompilerOptions + '$CompilerOption$/$ConfigName$/include'
		}

		.LocalConfigDependentInputPaths = {}
		ForEach(.ConfigDependentInputPath in .ConfigDependentInputPaths)
		{
			^LocalConfigDependentInputPaths + '$ConfigDependentInputPath$/$ConfigName$'
		}
		.CompilerInputPath + .LocalConfigDependentInputPaths
		
		.CompilerOutputPath = '$IntermediateDirectory$/$Name$/$ConfigName$'
	]

	Using(.LocalObjectList)

	If(.ObjectListName not in .BuildTargets)
	{
		^ReturnValues = { }
		AddUnities(.LocalObjectList)

		//Print('AddObjectList:$ObjectListName$')
		//PrintArray('AddObjectList:PrebuildDependencies:' .PreBuildDependencies)
		ObjectList('$ObjectListName$') {}
		^BuildTargets + .ObjectListName
	}

	^ReturnValues = { '$ObjectListName$' }
}

function AddLibrary(.Library .CompilerConfig)
{
	.LocalLibrary = 
	[
		Using(.Library)
		Using(.CompilerConfig)

		.LibraryName = '$Name$-lib-$ConfigName$'

		ForEach(.Task in .DependencyTasks)
		{
			^ReturnValues = { }
			AddTask(.Task .CompilerConfig)
			^PreBuildDependencies + .ReturnValues
		}

		If(.CompilerInputPattern == '*.c')
		{
			^CompilerOptions + .CompilerOptionsC
		}
		If(.CompilerInputPattern != '*.c')
		{
			^CompilerOptions + .CompilerOptionsCpp
		}

		.CompilerOptions + ' -DSPEEDO_PROFILING_LEVEL=$ProfilingLevel$'
		.CompilerOptions + ' -DSPEEDO_GRAPHICS_VALIDATION_LEVEL=$GraphicsValidationLevel$'
		.CompilerOptions + .LibraryCompilerOptions

		ForEach(.CompilerOption in .ConfigDependentCompilerOptions)
		{
			^CompilerOptions + '$CompilerOption$/$ConfigName$'
			^CompilerOptions + '$CompilerOption$/$ConfigName$/include'
		}

		.LocalConfigDependentInputPaths = {}
		ForEach(.ConfigDependentInputPath in .ConfigDependentInputPaths)
		{
			^LocalConfigDependentInputPaths + '$ConfigDependentInputPath$/$ConfigName$'
		}
		.CompilerInputPath + .LocalConfigDependentInputPaths
		
		.CompilerOutputPath = '$IntermediateDirectory$/$Name$/$ConfigName$'

		.LibrarianOutput = '$OutputDirectory$/$ConfigName$/$OutputFilePrefix$$Name$$OutputFileSuffix$'
	]

	Using(.LocalLibrary)

	If(.LibraryName not in .BuildTargets)
	{
		^ReturnValues = { }
		AddUnities(.LocalLibrary)

		//Print('AddLibrary:$LibraryName$')
		//PrintArray('AddLibrary:PrebuildDependencies:' .PreBuildDependencies)
		Library('$LibraryName$') {}
		^BuildTargets + .LibraryName
	}

	^ReturnValues = { '$LibraryName$' }
}

function AddDLL(.DLL .CompilerConfig)
{
	.LocalDLL = 
	[
		Using(.DLL)
		Using(.CompilerConfig)

		.DLLName = '$Name$-dll-$ConfigName$'

		ForEach(.Task in .DependencyTasks)
		{
			^ReturnValues = { }
			AddTask(.Task .CompilerConfig)
			^PreBuildDependencies + .ReturnValues
		}

		.LinkerOptions + .DLLLinkerOptions
		.LinkerOutput = '$OutputDirectory$/$ConfigName$/$OutputFilePrefix$$Name$$OutputFileSuffix$'
	]

	Using(.LocalDLL)

	If(.DLLName not in .BuildTargets)
	{
		ForEach(.ObjectList in .DependencyObjectLists)
		{
			^ReturnValues = { }
			AddObjectList(.ObjectList .CompilerConfig)
			^Libraries + .ReturnValues
		}

		ForEach(.Library in .DependencyLibraries)
		{
			^ReturnValues = { }
			AddLibrary(.Library .CompilerConfig)
			^Libraries + .ReturnValues
		}

		//Print('AddDLL:$DLLName$')
		//PrintArray('AddDLL:Libraries:' .Libraries)
		//PrintArray('AddDLL:PrebuildDependencies:' .PreBuildDependencies)
		DLL('$DLLName$') {}
		^BuildTargets + .DLLName
	}

	^ReturnValues = { '$DLLName$' }
}

function AddExecutable(.Executable .CompilerConfig)
{
	.LocalExecutable = 
	[
		Using(.Executable)
		Using(.CompilerConfig)

		.ExecutableName = '$Name$-exe-$ConfigName$'

		ForEach(.Task in .DependencyTasks)
		{
			^ReturnValues = { }
			AddTask(.Task .CompilerConfig)
			^PreBuildDependencies + .ReturnValues
		}

		If (.ConfigName == 'debug')
		{
			^LinkerOptions + .DebugExecutableLinkerOptions
		}
		If (.ConfigName != 'debug')
		{
			^LinkerOptions + .ReleaseExecutableLinkerOptions
		}
		
		.LinkerOutput = '$OutputDirectory$/$ConfigName$/$Name$$OutputFileSuffix$'
	]

	Using(.LocalExecutable)

	If(.ExecutableName not in .BuildTargets)
	{
		ForEach(.ObjectList in .DependencyObjectLists)
		{
			^ReturnValues = { }
			AddObjectList(.ObjectList .CompilerConfig)
			^Libraries + .ReturnValues
		}

		ForEach(.Library in .DependencyLibraries)
		{
			^ReturnValues = { }
			AddLibrary(.Library .CompilerConfig)
			^Libraries + .ReturnValues
		}

		ForEach(.DLL in .DependencyDLLs)
		{
			^ReturnValues = { }
			AddDLL(.DLL .CompilerConfig)
			^Libraries + .ReturnValues
		}

		//Print('AddExecutable:$ExecutableName$')
		//PrintArray('AddExecutable:Libraries:' .Libraries)
		//PrintArray('AddExecutable:PrebuildDependencies:' .PreBuildDependencies)
		Executable('$ExecutableName$') {}
		^BuildTargets + .ExecutableName
	}

	^ReturnValues = { '$ExecutableName$' }
}

function AddTest(.Test .CompilerConfig)
{
	.LocalTest = 
	[
		Using(.Test)
		Using(.CompilerConfig)

		.TestName = '$Name$-test-$ConfigName$'

		ForEach(.Task in .DependencyTasks)
		{
			^ReturnValues = { }
			AddTask(.Task .CompilerConfig)
			^PreBuildDependencies + .ReturnValues
		}
				
		If(.TestWorkingDir == .EmptyString)
		{
			^TestWorkingDir = '$IntermediateDirectory$/$Name$/$ConfigName$'
		}

		If (.ConfigName == 'debug')
		{
			^Environment = .DebugEnvironment
		}

		.TestExecutable = '$Name$-exe-$ConfigName$'
		.TestOutput = '$IntermediateDirectory$/$Name$/$ConfigName$/$TestOutputName$'
	]

	Using(.LocalTest)

	If(.TestName not in .BuildTargets)
	{
		ForEach(.Executable in .DependencyExecutables)
		{
			^ReturnValues = { }
			AddExecutable(.Executable .CompilerConfig)
		}
		
		//Print('AddTest:$TestName$')
		//PrintArray('AddTest:PrebuildDependencies:' .PreBuildDependencies)
	 	Test('$TestName$') {}
		^BuildTargets + .TestName
	}

	^ReturnValues = { '$TestName$' }
}

function AddTask(.Task .CompilerConfig)
{
	.LocalTask = 
	[
		Using(.Task)
		Using(.CompilerConfig)

		.TaskName = '$Name$-task-$ConfigName$'

		ForEach(.Task in .DependencyTasks)
		{
			^ReturnValues = { }
			AddTask(.Task .CompilerConfig)
			^PreBuildDependencies + .ReturnValues
		}

		If (.ExecExecutable == .EmptyString)
		{
			^ExecExecutable = '$Name$-exe-$ConfigName$'
		}

		If (.ExecWorkingDir == .EmptyString)
		{
			^ExecWorkingDir = '$IntermediateDirectory$'
		}

		If (.UseConfigDependentWorkingDir)
		{
			^ExecWorkingDir + '/$Name$/$ConfigName$'
		}

		If (.ExecOutputName == .EmptyString)
		{
			^ExecOutputName = '$Name$'
		}

		If (.ExecOutputPath == .EmptyString)
		{
			^ExecOutputPath = '$IntermediateDirectory$'
		}

		If (.UseConfigDependentOutputPath)
		{
			^ExecOutputPath + '/$Name$/$ConfigName$'
		}

		If (.DumpCompilerOptionsToFile)
		{
			^ExecArguments = ' -### "%1" -c'
				+ .BaseCompilerOptions
				+ .CompilerOptionsCpp
				+ ' >out 2>&1'
		}

		.ExecOutput = '$ExecOutputPath$/$ExecOutputName$'
	]

	Using(.LocalTask)

	If(.TaskName not in .BuildTargets)
	{
		ForEach(.Executable in .DependencyExecutables)
		{
			^ReturnValues = { }
			AddExecutable(.Executable .CompilerConfig)
		}

		//Print('AddTask:$TaskName$')
		//PrintArray('AddTask:PrebuildDependencies:' .PreBuildDependencies)
	 	Exec('$TaskName$') {}
		^BuildTargets + .TaskName
	}

	^ReturnValues = { '$TaskName$' }
}

function AddProjectConfig(.ArchitectureName .CompilerConfig)
{
	.LocalProjectConfig = 
	[
		Using(.CompilerConfig)

		.Platform = .ArchitectureName
		.Config = .ConfigName
		.ProjectConfigName = '$Config$_$Platform$'
	]

	Using(.LocalProjectConfig)

	If(.ProjectConfigName not in .ProjectConfigNames)
	{
		//Print('AddProjectConfig:$ProjectConfigName$')
		^ProjectConfigs + .LocalProjectConfig
		^ProjectConfigNames + .ProjectConfigName
	}

	^ReturnValues = { '$ProjectConfigName$' }
}

function AddProject(.Project .ProjectConfigs .ProjectDir)
{
	.LocalProject = 
	[
		Using(.Project)

		.ProjectName = '$Name$-$ProjectType$'
		.ProjectInputPaths = .UnityInputPath + .CompilerInputPath
		.ProjectFiles = .UnityInputFiles + .CompilerInputFiles
		.ProjectOutput = '$ProjectDir$/$ProjectName$.vcxproj'
		.Output = '$BuildOutputPath$/^$(Configuration)/$OutputFilePrefix$$Name$$OutputFilePrefix$'
		.ProjectConfigs = .ProjectConfigs
	]

	Using(.LocalProject)

	// .SolutionDependency = 
	// [
	//      Using(.Project)
	//     .Projects = { '$ProjectName$' }
	//     .Dependencies = { .Dependencies }
	// ]
	
	// .SolutionFolder = 
	// [
	//      Using(.Project)
	//     .Path = '$Name$'
	//     .Projects = { '$ProjectName$' }
	// ]

	//^SolutionDependencies + .SolutionDependency
	//^SolutionFolders + .SolutionFolder

	If(.ProjectName not in .ProjectNames)
	{
		ForEach(.ObjectList in .DependencyObjectLists)
		{
			^ReturnValues = { }
			AddProject(.ObjectList .ProjectConfigs .ProjectDir)
			//^Dependencies + .ReturnValues
		}

		ForEach(.Library in .DependencyLibraries)
		{
			^ReturnValues = { }
			AddProject(.Library .ProjectConfigs .ProjectDir)
			//^Dependencies + .ReturnValues
		}

		ForEach(.DLL in .DependencyDLLs)
		{
			^ReturnValues = { }
			AddProject(.DLL .ProjectConfigs .ProjectDir)
			//^Dependencies + .ReturnValues
		}

		//Print('AddProject:$ProjectName$')
		VCXProject('$ProjectName$') {}
		^ProjectNames + .ProjectName
	}

	^ReturnValues = { '$ProjectName$' }
}

function AddSolution(.Solution .ProjectConfigs .ProjectNames .SolutionDir)
{
	.LocalSolution = 
	[
		Using(.Solution)

		.SolutionName = '$Name$-$ProjectType$'
		.SolutionOutput = '$SolutionDir$/$Name$.sln'
		.SolutionProjects = .ProjectNames
		.SolutionConfigs = .ProjectConfigs
		//.SolutionFolders = .AllSolutionFolders
		//.SolutionDependencies = .AllSolutionDependencies
		//.SolutionVisualStudioVersion        // (optional) Version of Solution (default "14.0.22823.1" VS2015 RC)
		//.SolutionMinimumVisualStudioVersion // (optional) Min version of Solution (default "10.0.40219.1" VS2010 Express)
		.SolutionBuildProject = 'all-vcxproj'
		//.SolutionDeployProjects             // (optional) Project(s) set deploy
	]

	Using(.LocalSolution)

	If(.SolutionName not in .SolutionNames)
	{
		//PrintArray('AddSolution:SolutionProjects:' .SolutionProjects)
		//Print('AddSolution:$SolutionName$')
		VSSolution('$SolutionName$') {}
		^SolutionNames + .SolutionName
	}

	^ReturnValues = { '$SolutionName$' }
}
