cmake_minimum_required(VERSION 3.25.1)

include_guard()

set(CMAKE_VERBOSE_MAKEFILE ON)

# todo: import LLVMConfig.cmake
set(LLVM_PATH $ENV{LLVM_PATH} CACHE PATH "LLVM root path")
set(LLVM_TOOLS_PATH $ENV{LLVM_TOOLS_PATH} CACHE PATH "LLVM tools path")

# todo: cross-compiling support. this is currently not used.
set(TARGET_ARCHITECTURE $ENV{TARGET_ARCHITECTURE} CACHE PATH "Target architecture")
#

if(NOT (DEFINED ${CMAKE_CROSSCOMPILING} AND ${CMAKE_CROSSCOMPILING}))
	if (NOT DEFINED ${CMAKE_SYSTEM_PROCESSOR})
		set(CMAKE_SYSTEM_PROCESSOR ${CMAKE_HOST_SYSTEM_PROCESSOR})
	endif()
	if (NOT DEFINED ${CMAKE_SYSTEM_NAME})
		set(CMAKE_SYSTEM_NAME ${CMAKE_HOST_SYSTEM_NAME})
	endif()
	if (NOT DEFINED ${CMAKE_SYSTEM_VERSION})
		set(CMAKE_SYSTEM_VERSION ${CMAKE_HOST_SYSTEM_VERSION})
	endif()
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
	set(CMAKE_EXECUTABLE_SUFFIX ".exe")
	set(CMAKE_C_SIMULATE_ID "MSVC")
	set(CMAKE_CXX_SIMULATE_ID "MSVC")
else()
	set(CMAKE_EXECUTABLE_SUFFIX "")
endif()

set(CMAKE_AR ${LLVM_TOOLS_PATH}/llvm-ar${CMAKE_EXECUTABLE_SUFFIX})

set(CMAKE_C_COMPILER ${LLVM_TOOLS_PATH}/clang${CMAKE_EXECUTABLE_SUFFIX})
execute_process(COMMAND ${CMAKE_C_COMPILER} --version OUTPUT_VARIABLE ClangVersionOutput)
string(REGEX MATCH "^clang version ([0-9]+\.[0-9]+\.[0-9]+).*$" Unused "${ClangVersionOutput}")
set(CMAKE_C_COMPILER_ID "Clang")
set(CMAKE_C_COMPILER_ID_RUN TRUE)
set(CMAKE_C_COMPILER_FRONTEND_VARIANT "GNU")
set(CMAKE_C_COMPILER_LINKER_ID LLD)
set(CMAKE_C_COMPILER_LINKER_FRONTEND_VARIANT "GNU")
set(CMAKE_C_COMPILER_VERSION "${CMAKE_MATCH_1}")
set(CMAKE_C_STANDARD_COMPUTED_DEFAULT 23)
set(CMAKE_C_EXTENSIONS_COMPUTED_DEFAULT FALSE)
#set(CMAKE_C_COMPILER_WORKS TRUE)

set(CMAKE_CXX_COMPILER ${LLVM_TOOLS_PATH}/clang++${CMAKE_EXECUTABLE_SUFFIX})
execute_process(COMMAND ${CMAKE_CXX_COMPILER} --version OUTPUT_VARIABLE ClangVersionOutput)
string(REGEX MATCH "^clang version ([0-9]+\.[0-9]+\.[0-9]+).*$" Unused "${ClangVersionOutput}")
set(CMAKE_CXX_COMPILER_ID "Clang")
set(CMAKE_CXX_COMPILER_ID_RUN TRUE)
set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")
set(CMAKE_CXX_COMPILER_LINKER_ID LLD)
set(CMAKE_CXX_COMPILER_LINKER_FRONTEND_VARIANT "GNU")
set(CMAKE_CXX_COMPILER_VERSION "${CMAKE_MATCH_1}")
set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT 23)
set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT FALSE)
#set(CMAKE_CXX_COMPILER_WORKS TRUE)

# don't use CMAKE_LINKER, its apparently an "implementation detail" in wonderful CMakeland
#set(CMAKE_LINKER ${LLVM_TOOLS_PATH}/lld${CMAKE_EXECUTABLE_SUFFIX})

set(CMAKE_C11_STANDARD_COMPILE_OPTION "-std=c11")
set(CMAKE_C17_STANDARD_COMPILE_OPTION "-std=c17")
set(CMAKE_C23_STANDARD_COMPILE_OPTION "-std=c23")
set(CMAKE_CXX11_STANDARD_COMPILE_OPTION "-std=c++11")
set(CMAKE_CXX14_STANDARD_COMPILE_OPTION "-std=c++14")
set(CMAKE_CXX17_STANDARD_COMPILE_OPTION "-std=c++17")
set(CMAKE_CXX20_STANDARD_COMPILE_OPTION "-std=c++20")
set(CMAKE_CXX23_STANDARD_COMPILE_OPTION "-std=c++23")
set(CMAKE_CXX26_STANDARD_COMPILE_OPTION "-std=c++26")

set(CMAKE_LINKER_TYPE LLD)
set(CMAKE_C_USING_LINKER_LLD "-fuse-ld=lld")
set(CMAKE_C_USING_LINKER_MODE FLAG)
set(CMAKE_CXX_USING_LINKER_LLD "-fuse-ld=lld")
set(CMAKE_CXX_USING_LINKER_MODE FLAG)

set(CMAKE_RC_COMPILER ${LLVM_TOOLS_PATH}/llvm-rc${CMAKE_EXECUTABLE_SUFFIX})

set(COMPILE_FLAGS "-g")
set(COMPILE_FLAGS_DEBUG "-Og -fno-omit-frame-pointer -fno-inline-functions")
set(COMPILE_FLAGS_RELEASE "-O3 -ffast-math")
set(C_FLAGS "") #set(C_FLAGS "-nostdlibinc") # todo: use llvm libc headers
set(C_FLAGS_DEBUG "")
set(C_FLAGS_RELEASE "")
set(CXX_FLAGS "-nostdinc++ -nostdlib++ -isystem ${LLVM_PATH}/include/c++/v1 -fexperimental-library")
set(CXX_FLAGS_DEBUG "")
set(CXX_FLAGS_RELEASE "")
#set(CXX_FLAGS "${CXX_FLAGS} -fno-ms-compatibility")
#set(CXX_FLAGS "${CXX_FLAGS} -fno-rtti -fno-exceptions")
set(LINK_FLAGS "-L${LLVM_PATH}/lib") #set(LINK_FLAGS "${LINK_FLAGS} -nodefaultlibs")
set(LINK_FLAGS_DEBUG "")
set(LINK_FLAGS_RELEASE "")

set(C_DEFINES "")
set(C_DEFINES_DEBUG "-D_DEBUG")
set(C_DEFINES_RELEASE "-DNDEBUG")
set(CXX_DEFINES "")
set(CXX_DEFINES_DEBUG "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_DEBUG")
set(CXX_DEFINES_RELEASE "-D_LIBCPP_HARDENING_MODE=_LIBCPP_HARDENING_MODE_EXTENSIVE")

# UUID to enable CMake's `import std` handling
# it may potentially change with CMake versions
# set(CMAKE_EXPERIMENTAL_CXX_IMPORT_STD "0e5b6991-d74f-4b3d-a41c-cf096e0b2508") 
# set(CMAKE_CXX_MODULE_STD 1) # this is important

if (CMAKE_SYSTEM_PROCESSOR MATCHES "arm.*|aarch64")
	set(COMPILE_FLAGS "${COMPILE_FLAGS} -march=native+crc+crypto")
else()
	set(COMPILE_FLAGS "${COMPILE_FLAGS} -march=native")
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
	set(C_DEFINES "${C_DEFINES} -D__WINDOWS__ -D_WIN32 -D_WIN64 -DUNICODE -D_UNICODE -D_CRT_DECLARE_NONSTDC_NAMES -D_CRT_STDIO_ISO_WIDE_SPECIFIERS -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX")
	set(CXX_DEFINES "${CXX_DEFINES} -D_LIBCXX_ABI_FORCE_MICROSOFT")
	set(COMPILE_FLAGS "${COMPILE_FLAGS} -Xclang -gcodeview -Xclang -cfguard")
	set(CMAKE_C_STANDARD_LIBRARIES_INIT "-lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32 -loldnames")
	set(CMAKE_CXX_STANDARD_LIBRARIES_INIT "-llibc++ -lmsvcprt") # remove msvcprt when this has been merged: https://github.com/llvm/llvm-project/pull/94977
	set(LINK_FLAGS "${LINK_FLAGS} -Xlinker /DEBUG -Xlinker /GUARD:CF")
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE FALSE) # vulkan loader fails to link with LTO on windows
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
	set(C_DEFINES "${C_DEFINES} -D__LINUX__ -D__linux__ -D_GNU_SOURCE")
	set(CXX_DEFINES "${CXX_DEFINES} -isystem ${LLVM_PATH}/include/aarch64-unknown-linux-gnu/c++/v1")
	set(CMAKE_C_STANDARD_LIBRARIES_INIT "-lc -lpthread")
	set(CMAKE_CXX_STANDARD_LIBRARIES_INIT "-lc++ -lc++abi")
	set(LINK_FLAGS "${LINK_FLAGS} -L${LLVM_PATH}/lib/aarch64-unknown-linux-gnu -Wl,-rpath,${LLVM_PATH}/lib/aarch64-unknown-linux-gnu -Wl,-rpath,${LLVM_PATH}/lib -Wl,--undefined-version")
	# LLVMgold.so: error loading plugin: /home/danjo/Repos/speedo/build/toolchain/arm64-linux-release/tools/llvm/../lib/LLVMgold.so: cannot open shared object file: No such file or directory
	#set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)
	set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
	set(C_DEFINES "${C_DEFINES} -D__APPLE__ -D__OSX__ -D_GNU_SOURCE")
	set(CMAKE_C_STANDARD_LIBRARIES_INIT "-lc -lpthread")
	set(CMAKE_CXX_STANDARD_LIBRARIES_INIT "-lc++ -lc++abi")
	set(LINK_FLAGS "${LINK_FLAGS} -Wl,-rpath,${LLVM_PATH}/lib")
	set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE TRUE)
endif()

set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)

# todo: remove this when CMake supports it
set(CMAKE_C_STANDARD_LIBRARIES "${CMAKE_C_STANDARD_LIBRARIES_INIT}" CACHE STRING "C standard libs" FORCE)
set(CMAKE_CXX_STANDARD_LIBRARIES "${CMAKE_C_STANDARD_LIBRARIES_INIT} ${CMAKE_CXX_STANDARD_LIBRARIES_INIT}" CACHE STRING "CXX standard libs" FORCE)
#

set(CMAKE_C_FLAGS_INIT "${COMPILE_FLAGS} ${C_DEFINES} ${C_FLAGS}")
set(CMAKE_C_FLAGS_DEBUG_INIT "${COMPILE_FLAGS_DEBUG} ${C_DEFINES_DEBUG} ${C_FLAGS_DEBUG}")
set(CMAKE_C_FLAGS_PROFILE_INIT "${COMPILE_FLAGS_RELEASE} ${C_DEFINES_RELEASE} ${C_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_RELEASE_INIT "${COMPILE_FLAGS_RELEASE} ${C_DEFINES_RELEASE} ${C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_INIT "${COMPILE_FLAGS} ${C_DEFINES} ${CXX_DEFINES} ${CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG_INIT "${COMPILE_FLAGS_DEBUG} ${C_DEFINES_DEBUG} ${C_FLAGS_DEBUG} ${CXX_DEFINES_DEBUG} ${CXX_FLAGS_DEBUG}")
set(CMAKE_CXX_FLAGS_PROFILE_INIT "${COMPILE_FLAGS_RELEASE} ${C_DEFINES_RELEASE} ${C_FLAGS_RELEASE} ${CXX_DEFINES_RELEASE} ${CXX_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_RELEASE_INIT "${COMPILE_FLAGS_RELEASE} ${C_DEFINES_RELEASE} ${C_FLAGS_RELEASE} ${CXX_DEFINES_RELEASE} ${CXX_FLAGS_RELEASE}")
set(CMAKE_EXE_LINKER_FLAGS_INIT "${LINK_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT "${LINK_FLAGS_DEBUG}")
set(CMAKE_EXE_LINKER_FLAGS_PROFILE_INIT "${LINK_FLAGS_RELEASE}")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT "${LINK_FLAGS_RELEASE}")
set(CMAKE_MODULE_LINKER_FLAGS_INIT "${LINK_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS_DEBUG_INIT "${LINK_FLAGS_DEBUG}")
set(CMAKE_MODULE_LINKER_FLAGS_PROFILE_INIT "${LINK_FLAGS_RELEASE}")
set(CMAKE_MODULE_LINKER_FLAGS_RELEASE_INIT "${LINK_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_INIT "${LINK_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT "${LINK_FLAGS_DEBUG}")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE_INIT "${LINK_FLAGS_RELEASE}")
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE_INIT "${LINK_FLAGS_RELEASE}")
