From 5d52bfc3bcea47f90d1c12fb8f89ab3e76d91861 Mon Sep 17 00:00:00 2001
From: Daniel Johansson <1911831+djohansson@users.noreply.github.com>
Date: Thu, 31 Oct 2024 15:18:47 +0100
Subject: [PATCH] cxx26 fix invalid enum use

---
 imgui.cpp         |  4 ++--
 imgui_internal.h  |  2 +-
 imgui_widgets.cpp | 10 +++++-----
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/imgui.cpp b/imgui.cpp
index 2c86112..d8ab8c1 100644
--- a/imgui.cpp
+++ b/imgui.cpp
@@ -5517,7 +5517,7 @@ bool ImGui::IsItemEdited()
 void ImGui::SetNextItemAllowOverlap()
 {
     ImGuiContext& g = *GImGui;
-    g.NextItemData.ItemFlags |= ImGuiItemFlags_AllowOverlap;
+    g.NextItemData.ItemFlags |= static_cast<int>(ImGuiItemFlags_AllowOverlap);
 }
 
 #ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
@@ -10263,7 +10263,7 @@ bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg, ImGu
 
     // Lightweight clear of SetNextItemXXX data.
     g.NextItemData.Flags = ImGuiNextItemDataFlags_None;
-    g.NextItemData.ItemFlags = ImGuiItemFlags_None;
+    g.NextItemData.ItemFlags = static_cast<int>(ImGuiItemFlags_None);
 
 #ifdef IMGUI_ENABLE_TEST_ENGINE
     if (id != 0)
diff --git a/imgui_internal.h b/imgui_internal.h
index ab43922..c832811 100644
--- a/imgui_internal.h
+++ b/imgui_internal.h
@@ -1234,7 +1234,7 @@ struct ImGuiNextItemData
     ImGuiID                     StorageId;          // Set by SetNextItemStorageID()
 
     ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); SelectionUserData = -1; }
-    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; ItemFlags = ImGuiItemFlags_None; } // Also cleared manually by ItemAdd()!
+    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; ItemFlags = static_cast<int>(ImGuiItemFlags_None); } // Also cleared manually by ItemAdd()!
 };
 
 // Status storage for the last submitted item
diff --git a/imgui_widgets.cpp b/imgui_widgets.cpp
index 2aa24ef..e1b28cb 100644
--- a/imgui_widgets.cpp
+++ b/imgui_widgets.cpp
@@ -1216,7 +1216,7 @@ bool ImGui::CheckboxFlagsT(const char* label, T* flags, T flags_value)
     if (!all_on && any_on)
     {
         ImGuiContext& g = *GImGui;
-        g.NextItemData.ItemFlags |= ImGuiItemFlags_MixedValue;
+        g.NextItemData.ItemFlags |= static_cast<int>(ImGuiItemFlags_MixedValue);
         pressed = Checkbox(label, &all_on);
     }
     else
@@ -5193,7 +5193,7 @@ bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_
     {
         // For focus requests to work on our multiline we need to ensure our child ItemAdd() call specifies the ImGuiItemFlags_Inputable (ref issue #4761)...
         Dummy(ImVec2(text_size.x, text_size.y + style.FramePadding.y));
-        g.NextItemData.ItemFlags |= ImGuiItemFlags_Inputable | ImGuiItemFlags_NoTabStop;
+        g.NextItemData.ItemFlags |= static_cast<int>(ImGuiItemFlags_Inputable) | static_cast<int>(ImGuiItemFlags_NoTabStop);
         EndChild();
         item_data_backup.StatusFlags |= (g.LastItemData.StatusFlags & ImGuiItemStatusFlags_HoveredWindow);
 
@@ -5598,7 +5598,7 @@ bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags fl
     ImGuiIO& io = g.IO;
 
     const float width = CalcItemWidth();
-    const bool is_readonly = ((g.NextItemData.ItemFlags | g.CurrentItemFlags) & ImGuiItemFlags_ReadOnly) != 0;
+    const bool is_readonly = ((g.NextItemData.ItemFlags | g.CurrentItemFlags) & static_cast<int>(ImGuiItemFlags_ReadOnly)) != 0;
     g.NextItemData.ClearFlags();
 
     PushID(label);
@@ -7559,13 +7559,13 @@ void ImGui::SetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_d
     if (ImGuiMultiSelectTempData* ms = g.CurrentMultiSelect)
     {
         // Auto updating RangeSrcPassedBy for cases were clipper is not used (done before ItemAdd() clipping)
-        g.NextItemData.ItemFlags |= ImGuiItemFlags_HasSelectionUserData | ImGuiItemFlags_IsMultiSelect;
+        g.NextItemData.ItemFlags |= static_cast<int>(ImGuiItemFlags_HasSelectionUserData) | static_cast<int>(ImGuiItemFlags_IsMultiSelect);
         if (ms->IO.RangeSrcItem == selection_user_data)
             ms->RangeSrcPassedBy = true;
     }
     else
     {
-        g.NextItemData.ItemFlags |= ImGuiItemFlags_HasSelectionUserData;
+        g.NextItemData.ItemFlags |= static_cast<int>(ImGuiItemFlags_HasSelectionUserData);
     }
 }
 
-- 
2.47.0.windows.1

