From cb5eac698d403c29ed8eb9bbfc86d4c361316061 Mon Sep 17 00:00:00 2001
From: Daniel Johansson <1911831+djohansson@users.noreply.github.com>
Date: Sun, 9 Mar 2025 15:02:47 +0100
Subject: [PATCH] fix implicit ANSI code under UNICODE define

---
 layers/error_message/logging.cpp                  | 2 +-
 layers/layer_options.cpp                          | 2 +-
 layers/vk_layer_config.cpp                        | 6 +++---
 layers/vulkan/generated/vk_function_pointers.cpp  | 4 ++--
 scripts/generators/function_pointers_generator.py | 4 ++--
 5 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/layers/error_message/logging.cpp b/layers/error_message/logging.cpp
index 4210d65..fc5f411 100644
--- a/layers/error_message/logging.cpp
+++ b/layers/error_message/logging.cpp
@@ -781,7 +781,7 @@ VKAPI_ATTR VkBool32 VKAPI_CALL MessengerWin32DebugOutputMsg(VkDebugUtilsMessageS
     [[maybe_unused]] const char *cstr = tmp.c_str();
 
 #ifdef VK_USE_PLATFORM_WIN32_KHR
-    OutputDebugString(cstr);
+    OutputDebugStringA(cstr);
 #endif
 
     return false;
diff --git a/layers/layer_options.cpp b/layers/layer_options.cpp
index 0a2dc8c..c7765f8 100644
--- a/layers/layer_options.cpp
+++ b/layers/layer_options.cpp
@@ -902,7 +902,7 @@ static void ProcessDebugReportSettings(ConfigAndEnvSettings *settings_data, VkuL
             const char *cstr = tmp.c_str();
             printf("%s", cstr);
 #ifdef VK_USE_PLATFORM_WIN32_KHR
-            OutputDebugString(cstr);
+            OutputDebugStringA(cstr);
 #endif
 #ifdef VK_USE_PLATFORM_ANDROID_KHR
             __android_log_print(ANDROID_LOG_INFO, "VALIDATION", "%s", cstr);
diff --git a/layers/vk_layer_config.cpp b/layers/vk_layer_config.cpp
index 795f307..41ed6f6 100644
--- a/layers/vk_layer_config.cpp
+++ b/layers/vk_layer_config.cpp
@@ -54,12 +54,12 @@ std::string GetEnvironment(const char *variable) {
     const char *output = getenv(variable);
     return output == NULL ? "" : output;
 #elif defined(_WIN32)
-    int size = GetEnvironmentVariable(variable, NULL, 0);
+    int size = GetEnvironmentVariableA(variable, NULL, 0);
     if (size == 0) {
         return "";
     }
     char *buffer = new char[size];
-    GetEnvironmentVariable(variable, buffer, size);
+    GetEnvironmentVariableA(variable, buffer, size);
     std::string output = buffer;
     delete[] buffer;
     return output;
@@ -91,7 +91,7 @@ void SetEnvironment(const char *variable, const char *value) {
 #if !defined(__ANDROID__) && !defined(_WIN32)
     setenv(variable, value, 1);
 #elif defined(_WIN32)
-    SetEnvironmentVariable(variable, value);
+    SetEnvironmentVariableA(variable, value);
 #elif defined(__ANDROID__)
     (void)variable;
     (void)value;
diff --git a/layers/vulkan/generated/vk_function_pointers.cpp b/layers/vulkan/generated/vk_function_pointers.cpp
index d77ded6..616e9e1 100644
--- a/layers/vulkan/generated/vk_function_pointers.cpp
+++ b/layers/vulkan/generated/vk_function_pointers.cpp
@@ -36,10 +36,10 @@
 typedef HMODULE dl_handle;
 static dl_handle open_library(const char *lib_path) {
     // Try loading the library the original way first.
-    dl_handle lib_handle = LoadLibrary(lib_path);
+    dl_handle lib_handle = LoadLibraryA(lib_path);
     if (lib_handle == NULL && GetLastError() == ERROR_MOD_NOT_FOUND) {
         // If that failed, then try loading it with broader search folders.
-        lib_handle = LoadLibraryEx(lib_path, NULL, LOAD_LIBRARY_SEARCH_DEFAULT_DIRS | LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR);
+        lib_handle = LoadLibraryExA(lib_path, NULL, LOAD_LIBRARY_SEARCH_DEFAULT_DIRS | LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR);
     }
     return lib_handle;
 }
diff --git a/scripts/generators/function_pointers_generator.py b/scripts/generators/function_pointers_generator.py
index 0f0817b..c95e2ac 100644
--- a/scripts/generators/function_pointers_generator.py
+++ b/scripts/generators/function_pointers_generator.py
@@ -110,10 +110,10 @@ void ResetAllExtensions();
 typedef HMODULE dl_handle;
 static dl_handle open_library(const char *lib_path) {
     // Try loading the library the original way first.
-    dl_handle lib_handle = LoadLibrary(lib_path);
+    dl_handle lib_handle = LoadLibraryA(lib_path);
     if (lib_handle == NULL && GetLastError() == ERROR_MOD_NOT_FOUND) {
         // If that failed, then try loading it with broader search folders.
-        lib_handle = LoadLibraryEx(lib_path, NULL, LOAD_LIBRARY_SEARCH_DEFAULT_DIRS | LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR);
+        lib_handle = LoadLibraryExA(lib_path, NULL, LOAD_LIBRARY_SEARCH_DEFAULT_DIRS | LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR);
     }
     return lib_handle;
 }
-- 
2.48.1.windows.1

