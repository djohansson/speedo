name: Run vcpkg Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-vcpkg:
    runs-on: ubuntu-latest
    steps:
      - name: run-vcpkg
        # You may pin to the exact commit or the version.
        # uses: lukka/run-vcpkg@5e0cab206a5ea620130caf672fce3e4a6b5666a1
        uses: lukka/run-vcpkg@v11.5
        with:
          # 
          vcpkgDirectory: # optional, default is ${{ github.workspace }}/vcpkg
          # Run the installation of packages by running `vcpkg install` on the directory of the discovered 'vcpkg.json' file. Default is false.
          runVcpkgInstall: # optional
          # Specify the full SHA-1 hash of a Git commit (not a branch name, nor a tag!) that establishes which version of vcpkg needs to be used. When using vcpkg as a Git submodule, this input is *not* needed as implicitly specified by the submodule. When not specified and a submodule is not used for vcpkg, the commit id is being searched in vcpkg.json or vcpkg-configure.json, see vcpkgConfigurationJsonGlob input.
          vcpkgGitCommitId: # optional
          # Specify the URL Git repository to download vcpkg from. Defaults to https://github.com/microsoft/vcpkg.git
          vcpkgGitURL: # optional, default is https://github.com/microsoft/vcpkg.git
          # Avoid to update vcpkg (launching git) in the specified 'vcpkgDirectory'. This is useful when vcpkg is being checkout independently of the run-vcpkg action. Default is false.
          doNotUpdateVcpkg: # optional
          # Enable the caching of the vcpkg executable and its data files (e.g. ports) by setting it to false. Default is true. Set this input to false when the vcpkg's executable is not delivered as a prebuilt file upon bootstrapping vcpkg. This does not disable vcpkg's binary cache which is always on and can be controlled by the user with the env var VCPKG_BINARY_SOURCES.
          doNotCache: # optional, default is true
          # Specify the glob expression used to discover the vcpkg.json whose content's hash is added to the cache key. On Windows runners using `github.workspace` context to form the expression would not work as expected since it contains backslashes. Use instead `**/path/to/vcpkg.json` to match the desired `vcpkg.json` file.
          vcpkgJsonGlob: # optional, default is **/vcpkg.json
          # Specify an array of string containing the pattenrs to be ignored when searching for the vcpkg.json file. The default value ignores the pattern '**/vcpkg/**'
          vcpkgJsonIgnores: # optional, default is ['**/vcpkg/**']
          # When the vcpkgGitCommitId input is not provided by the user, this glob expression is used to locate the vcpkg-configuration.json file which contains the commit id of the builtin baseline. On Windows GitHub runners do not use `github.workspace` context expression to form the value of this input, since it contains backslashes and it will eventually fail. Use instead `**/path/to/vcpkg-configuration.json` to match the desired `vcpkg-configuration.json` file.
          vcpkgConfigurationJsonGlob: # optional, default is **/vcpkg-configuration.json
          # Specify a path to store the built packages to be cached with the GitHub cache service. Default is '<runnerWorkspace>/b/vcpkg_cache'.
          binaryCachePath: # optional
          # Specify the command line to run vcpkg with. This is only useful when the input 'runVcpkgInstall' is set to true.
          runVcpkgFormatString: # optional, default is [`install`, `--recurse`, `--clean-after-build`, `--x-install-root`, `$[env.VCPKG_INSTALLED_DIR]`, `--triplet`, `$[env.VCPKG_DEFAULT_TRIPLET]`]
          # Specify which shell to be used when launching commands. 'true' means the default shell is used. 'false' means no shell is used. It also can be an absolute path and arguments of the shell to spawn commands with.
          useShell: # optional, default is true
          # Specifies a semicolon separated list of regular expressions that are used to identify log file paths in the workflow output. A regular expression must have a single capturing group, that is a single pair of parenthesis such as 'See also (.+.log)'. When a match occurs, the content of the file is written into the workflow output for disclosing its content to the user. The default regular expressions are for CMake's and vcpkg's log files.
          logCollectionRegExps: # optional, default is \s*"(.+CMakeOutput\.log)"\.\s*;\s*"(.+CMakeError\.log)"\.\s*;\s*(.+out\.log)\s*;\s+(.+err\.log)\s*;\s*(.+vcpkg.+\.log)\s*
          
